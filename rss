<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Bites from Good Eggs]]></title>
        <description><![CDATA[Bites from Good Eggs]]></description>
        <link>http://goodeggs.github.io/bites</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 17 Jun 2014 01:09:54 GMT</lastBuildDate>
        <atom:link href="http://goodeggs.github.io/bites/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Good Eggs]]></author>
        <pubDate>Tue, 17 Jun 2014 01:09:48 GMT</pubDate>
        <item>
            <title><![CDATA[Loading Scripts in the Critical Path: A Commerce Case Study]]></title>
            <description><![CDATA[<div class="series">
    <blockquote>This is the third article in a series of posts detailing the launch of our mobile site.</blockquote>
    <ol>
        <li><a href="/posts/good-eggs-goes-mobile">Good Eggs Goes Mobile</a></li>
        <li><a href="/posts/rivets-for-mobile">Rivets for Mobile Web</a></li>
        <li><a href="/posts/mobile-page-load">Planning Page Load Sequence</a></li>
        <li>HTTP Caching with Fastly</li>
        <li>Appropriate image sizes with imgix</li>
        <li>Integration testing over unit testing</li>
    </ol>
</div>

<p>Starting javascript on DOMContentLoaded, a pattern <a href="https://docs.angularjs.org/guide/bootstrap">baked into</a> or <a href="http://backbonejs.org/docs/todos.html#section-2">recommended by</a> many frameworks, defers some work that could be done earlier.  There aren&#39;t many examples of what can be done early, or how to wire it up.  Here&#39;s how we did it on the Good Eggs mobile site.
<!-- more --></p>
<h2 id="the-problem">The Problem</h2>
<p>DOMContentLoaded is the start of life for most Javascript apps. It&#39;s a browser event signalling HTML has been fully parsed, and javascript can do <a href="http://blogs.msdn.com/b/ie/archive/2008/04/23/what-happened-to-operation-aborted.aspx">its worst</a>. Frameworks like Angular wait by default for this event before starting up. Usually, our app must start up before a visitor can accomplish whatever it is they came for.  We need to wire up event listeners.  We might even need to generate DOM elements by rendering templates. DOMContentLoaded quickly becomes a bottleneck in our <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp">critical rendering path</a>.  Phones, with their high-latency networks, exacerbate the problem.  An extra request for javascript can <a href="http://calendar.perfplanet.com/2011/carrier-networks-down-the-rabbit-hole/">add hundreds of milliseconds</a>.</p>
<p>While this bottleneck is fairly <a href="https://groups.google.com/forum/#!topic/closure-library-discuss/G-7Ltdavy0E">widely</a> <a href="https://alexsexton.com/blog/2010/01/dont-let-document-ready-slow-you-down/">known</a>, and most frameworks provide hooks for motivated developers to work around it, examples of starting up rich browser apps early are sparse. The Good Eggs engineering team, unconvinced that the heavy-backbone client-rendered approach of our desktop site could deliver a satisfying mobile experience, explored early start up.</p>
<h2 id="our-approach">Our Approach</h2>
<div class="right">
<img src="/images/mobile-page-load/complete-page.jpg" alt="finished page">
</div>

<p>We&#39;ll step through loading a page selling blueberries as an example.  It&#39;s a good candidate for page load optimization because it&#39;s high traffic, and much of the value of the page doesn&#39;t depend on the interactive elements. Visitors land on this page to learn more about blueberries, things like &quot;Who grew them?&quot;, or &quot;Were they grown with pesticides?&quot;.  If they like what they find they may decide to buy, but we can build out the shopping widgets in a few hundred milliseconds while they learn.  We&#39;re not reducing the functionality of the page, or the total work it takes to set up, just moving some of it out of the critical path.</p>
<p>Hoping to add minimal complexity, we split the single event, DOMContentLoaded, into the three that benefitted us most:</p>
<ol>
<li><a href="#page-dom-loaded">Page DOM Loaded</a> - The interesting bits of HTML markup have loaded</li>
<li><a href="#page-js-loaded">Page JS Loaded</a> - Page specific, user-independent functionality has loaded</li>
<li><a href="#session-loaded">Session Loaded</a> - User-specific functionality and data has loaded</li>
</ol>
<div class="clear"></div>

<p>Loading the page on an iPhone 5 over a 3G network reveals this timeline:</p>
<p><img src="/images/mobile-page-load/timeline.jpg" alt="timeline"></p>
<p>Note that all three of these events occur on this page before <a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded">DOMContentLoaded</a>, the traditional launchpoint for single page js apps.  We&#39;re piggybacking on the browser&#39;s <a href="http://en.wikipedia.org/wiki/Incremental_rendering">incremental rendering</a> to wire up javascript before the DOM has fully finished loading.</p>
<pre class="highlight"><code class="xml"><span class="tag">&lt;<span class="title">body</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- Page DOM ... --&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="comment">&lt;!-- 1. Page DOM Loaded --&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.example.com/page.{{hash}}.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="comment">&lt;!-- 2. Page JS Loaded --&gt;</span>
  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">startPage({<span class="comment">/* user-agnostic data */</span>})</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/session.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="comment">&lt;!-- 3. Session JS Loaded --&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="comment">&lt;!-- DOMContentLoaded --&gt;</span></code></pre>
<p>What can we do at these points? We&#39;ll explore each in detail below.</p>
<h2 id="page-dom-loaded">Page DOM Loaded</h2>
<div class="right">
<img src="/images/mobile-page-load/page-dom-loaded.jpg" alt="page dom loaded">
</div>

<p>At this point, we&#39;ve loaded the markup that makes this page useful: the name and size of the blueberries a (cached) photo, a link to the shopper&#39;s basket and more.</p>
<p>The link to the basket and the link back to previous page are vanilla <code>&lt;a&gt;</code> tags, so the visitor can click them now before any javascript has loaded.  The hamburger menu icon won&#39;t actaully open the menu until the Page JS Loaded hook.  We could hide it until js has loaded but the flickering drew unwanted attention to that corner of the screen.</p>
<p>Note that that basket icon, while clickable, doesn&#39;t yet have the count of items in the basket.  That user-specific count comes in with the session.</p>
<p>By building the page with this stage of the lifecycle in mind, and pre-rendering on the server, we show information about the blueberries a full second before DOMContentLoaded.  If the user is just browsing (not shopping), this is the end of their critical path.</p>
<div class="clear"></div>

<h2 id="page-js-loaded">Page JS Loaded</h2>
<div class="right">
<img src="/images/mobile-page-load/page-js-loaded.jpg" alt="page js loaded">
</div>

<p>At this point, all the javascript powering interactions on this page has loaded and executed. The hamburger menu is now interactive, even though we still don&#39;t know how many items are in the user&#39;s basket.</p>
<p>Although we&#39;ve wired up event listeners for the &quot;Add to Basket&quot; button and quantity toggle (saving future script execution cycles), we keep the button hidden until we know if the user already has some of these blueberries in their basket so we can message appropriately.</p>
<div class="clear"></div>

<h2 id="session-loaded">Session Loaded</h2>
<div class="right">
<img src="/images/mobile-page-load/all-js-loaded.jpg" alt="finished page">
</div>

<p>At this point, we&#39;ve got user-specific data like the contents of their basket.  We can finally fill in that pesky item count in the top right, and show the &quot;Add to Basket&quot; button.</p>
<p>Why is this a big enough win to merit one of three lifecycle events? Caching.</p>
<p>Fastly can deliver our js bundle cached from its CDN in less time than it takes our server to send a little user-specific session information.  The screenshot below shows the case with the largest gap, where cachable scripts are already cached on the phone (note the 304 response) and only the session requires a network request.  This is the load sequence we expect for visitors browsing around the site, looking at all the wild vegetables availing only in the spring.</p>
<div class="clear"></div>

<p><img src="/images/mobile-page-load/network.jpg" alt="network"></p>
<p>For visitors who came to shop (rather than ogle), the &quot;Add to Basket&quot; button is in the critical path. They can&#39;t leave this page with the blueberries they came for until they click that button. We wait for session information to load before showing the button so shoppers can see how many, if any, blueberries they&#39;re already getting.</p>
<p>The session request is often the slowest for this user flow. We want to start it as early as possible, so we load it with a script tag. Firing off an XmlHttpRequest from the page js would be more convenient for developers (we&#39;d get a sucess callback to wire into), but doing so would delay starting the session request until after the page script had loaded and executed, potentially several hundred millis.  Instead we place a script tag just below the page js script tag in the body:</p>
<pre class="highlight"><code class="xml"><span class="tag">&lt;<span class="title">body</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- Page DOM ... --&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.example.com/page.{{hash}}.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">startPage(<span class="comment">/*...*/</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/session.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span></code></pre>
<p>With this arrangement, modern browsers will download both scripts in parallel, and execute them in the order they appear in the DOM. The page script can listen for the session script to finish, fill in the user details, and complete our page.</p>
<h2 id="next-steps">Next Steps</h2>
<p>There are still major oppourtunities to optimize our critical path.</p>
<p>Currently, to keep the build process simple, we inline all the styles for the whole site in the head of every page. This should be trimmed down to only the styles used on the page, and ideally on the styles for the above-the-fold content.</p>
<div class="right">
<img src="/images/mobile-page-load/incremental.jpg" alt="incremental rendering">
</div>

<p>We should optimize the order of the elements in the page DOM, so the most interesting are incrementally rendered first.  Currently the DOM order mirrors vertical order on the page, loading the navigation first.</p>
<p>For maximum performance, all the HTML and CSS to render the above-the-fold content should <a href="http://calendar.perfplanet.com/2012/make-your-mobile-pages-render-in-under-one-second/">come in the first 15kB</a> (compressed).</p>
<div class="clear"></div>

<p>We&#39;re hoping these three page load hooks give us the flexibility to tune mobile and responsive web perfomance moving forward.  If you&#39;ve tried a different approach to optimizing the DOMContentLoaded bottleneck, we&#39;d love to hear about it!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/mobile-page-load/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/mobile-page-load/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Mon, 16 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comparing Node.js Promises, Try/Catch, Angular Zone.js and yes, Zone]]></title>
            <description><![CDATA[<blockquote>
<p>Reposted with permission by <a href="http://strongloop.com/">StrongLoop</a>. Originally appeared on <a href="http://strongloop.com/strongblog/comparing-node-js-promises-trycatch-zone-js-angular/">April 16, 2014</a>.</p>
</blockquote>
<h1 id="handling-errors-in-async-flow">Handling errors in async flow</h1>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing async flow and escaping the <a href="http://callbackhell.com/">callback hell</a>.</p>
<h2 id="the-problem">The problem</h2>
<p>Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.</p>
<!-- more -->

<p>Lets look at the following code:</p>
<pre class="highlight"><code class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">updateDependencies</span><span class="params">(packageName, done)</span> {</span>
  findPackage(packageName, <span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> {</span>
    <span class="keyword">if</span> (err) {
      done(err);
    }
    <span class="keyword">else</span> {
      <span class="keyword">try</span> {
        <span class="package"><span class="keyword">package</span> = <span class="title">JSON</span>.<span class="title">parse</span>(<span class="title">content</span>);
      }
      <span class="title">catch</span> (<span class="title">e</span>) {</span>
        done(e);
      }

      findDependencies(<span class="package"><span class="keyword">package</span>, <span class="title">function</span>(<span class="title">err</span>, <span class="title">dependencies</span>)) {</span>
        <span class="keyword">if</span> (err) {
          done(err);
        }
        <span class="keyword">else</span> {
          processDependencies(dependencies, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> {</span>
            <span class="keyword">if</span> (err) {
              done(err);
            }
            <span class="keyword">else</span> {
              done(<span class="literal">null</span>, dependencies);
            }
          });
        }
      });
    }
  });
}</code></pre>
<p>We are covering all possible failure cases here using combination of <code>try/catch</code> and callback error handling, but boy do we repeat ourselves over and over again. Lets try and rewrite this!</p>
<h2 id="error-handling-using-try-catch">Error handling using try/catch</h2>
<pre class="highlight"><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">updateDependencies</span><span class="params">(packageName, done)</span> {</span>
  <span class="keyword">try</span> {
    findPackage(packageName, <span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> {</span>
      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;

      findDependencies(JSON.parse(content), <span class="function"><span class="keyword">function</span><span class="params">(err, dependencies)</span>) {</span>
        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;

        processDependencies(dependencies, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> {</span>
          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;

          done(<span class="literal">null</span>, dependencies);
        });
      });
    });
  } <span class="keyword">catch</span> (e) {
    done(e);
  }
}</code></pre>
<p>Nice! That&#39;s much better. However, if we run this now, no errors will be caught. What&#39;s going on here?</p>
<p><code>try/catch</code> idiom works very well when you have fully synchronous code, but asynchronous operations render it useless.</p>
<p>The outer <code>try/catch</code> block will never catch anything because <code>findPackage</code> is asynchronous. The function will begin its course while the outer stack runs through and gets to the last line without any errors.</p>
<p>If an error occurs at some point in the future inside asynchronous <code>findPackage</code> - <strong>nothing will be caught</strong>.</p>
<p><img src="http://goodeggs.github.io/bites/images/posts/promises-trycatch-zones/catch-fail.gif"/></p>
<p>Not useful.</p>
<h2 id="error-handling-using-promises">Error handling using promises</h2>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing asynchronous flow and escaping the <a href="http://callbackhell.com/">callback hell</a> with promises. Lets put this promises to work here and rewrite this function.</p>
<p>For the sake of moving forward quicker lets assume we are using <a href="https://github.com/petkaantonov/bluebird">Bluebird</a> promises library and that all our APIs now return promises instead of taking callbacks:</p>
<pre class="highlight"><code class="scilab"><span class="function"><span class="keyword">function</span> <span class="title">updateDependencies</span><span class="params">(packageName)</span> {</span>
  <span class="keyword">return</span> findPackage(packageName)
    .<span class="keyword">then</span>(<span class="transposed_variable">JSON.</span>parse)
    .<span class="keyword">then</span>(findDependencies)
    .<span class="keyword">then</span>(processDependencies)
    .<span class="keyword">then</span>(<span class="transposed_variable">res.</span>send)
    ;
}</code></pre>
<p>Oh wow, that is so much nicer! Right? Right!</p>
<p>But Alex, &quot;we&#39;ve lost our error handling&quot;, you might say. That&#39;s right, we don&#39;t need to do anything special here to propagate error because we return a promise and there&#39;s built in support for error flow. Lets see how error handling might look like with promises:</p>
<pre class="highlight"><code class="scilab"><span class="transposed_variable">button.</span>addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  updateDependencies(<span class="string">"packageName"</span>)
    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(dependencies)</span> {</span>
      <span class="transposed_variable">output.</span>innerHTML = <span class="transposed_variable">dependencies.</span>join(<span class="string">"\n"</span>);
    })
    .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(err)</span> {</span>
      <span class="transposed_variable">output.</span>innerHTML = <span class="string">"There was an error"</span>;
    });
});</code></pre>
<p>Very slick, I&#39;m a fan!</p>
<h2 id="error-using-zones">Error using Zones</h2>
<p>Handling rejected promises works really well when we are in full control of the flow. But what happens if some third-party code throws an error during an asynchronous operation? Lets look at another example:</p>
<pre class="highlight"><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">thirdPartyFunction</span><span class="params">()</span> {</span>
  <span class="function"><span class="keyword">function</span> <span class="title">fakeXHR</span><span class="params">()</span> {</span>
    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Invalid dependencies"</span>);
  }

  setTimeout(fakeXHR, <span class="number">100</span>);
}

<span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> {</span>
  button.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="title">onClick</span><span class="params">()</span> {</span>
    thirdPartyFunction();
  });
}

main();</code></pre>
<p>In this case, we wouldn&#39;t have a chance to catch and process the error. Generally, the only recourse here is using half baked <code>window.onerror</code> that doesn&#39;t give you any stack information at all. At least you can log something, right? Not that there&#39;s much to log:</p>
<pre class="highlight"><code class="vbnet">Uncaught <span class="keyword">Error</span>: Invalid dependencies
    fakeXHR</code></pre>
<p>Up until recently that was pretty much all we had. However, this january <a href="https://github.com/btford">Brian Ford</a> of the <a href="http://angularjs.org">angular.js</a> fame has released <a href="https://github.com/btford/zone.js/">Zone.js</a> which aims to help tackle this.</p>
<p>Basically, <a href="https://github.com/btford/zone.js/">Zone.js</a> <strong>overrides all asynchronous functions in the browser</strong> with custom implementations which allows it to keep track of the context. Dangerous? Yes! But as we say in Soviet Russia, &quot;he who doesn&#39;t risk never gets to drink champagne&quot; (or in English &quot;nothing ventured, nothing gained&quot;).</p>
<p>Anyways, lets look at how this works. Assuming you have included <code>zones.js</code> and <code>long-stack-trace-zone.js</code> as per the docs, we just change <code>main()</code> call to:</p>
<pre class="highlight"><code class="avrasm">zone<span class="preprocessor">.fork</span>(Zone<span class="preprocessor">.longStackTraceZone</span>)<span class="preprocessor">.run</span>(main)<span class="comment">;</span></code></pre>
<p>Refresh, click the button, and now our stack looks like this:</p>
<pre class="highlight"><code class="bash">Error: Invalid dependencies
    at fakeXHR (script.js:<span class="number">7</span>:<span class="number">11</span>)
    at Zone.run (zones.js:<span class="number">41</span>:<span class="number">19</span>)
    at zoneBoundFn (zones.js:<span class="number">27</span>:<span class="number">19</span>)
--- Tue Mar <span class="number">25</span> <span class="number">2014</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">32</span> GMT-<span class="number">0700</span> (PDT) - <span class="number">106</span>ms ago
Error
    at Function.getStacktraceWithUncaughtError (long-stack-trace-zone.js:<span class="number">24</span>:<span class="number">32</span>)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:<span class="number">70</span>:<span class="number">43</span>)
    at Zone.<span class="built_in">bind</span> (zones.js:<span class="number">25</span>:<span class="number">21</span>)
    at zone.(anonymous function) (zones.js:<span class="number">61</span>:<span class="number">27</span>)
    at marker (zones.js:<span class="number">66</span>:<span class="number">25</span>)
    at thirdPartyFunction (script.js:<span class="number">10</span>:<span class="number">3</span>)
    at HTMLButtonElement.onClick (script.js:<span class="number">15</span>:<span class="number">5</span>)
    at HTMLButtonElement.x.event.dispatch (jquery.js:<span class="number">5</span>:<span class="number">10006</span>)
    at HTMLButtonElement.y.handle (jquery.js:<span class="number">5</span>:<span class="number">6789</span>)
    at Zone.run (zones.js:<span class="number">41</span>:<span class="number">19</span>)
--- Tue Mar <span class="number">25</span> <span class="number">2014</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">32</span> GMT-<span class="number">0700</span> (PDT) - <span class="number">1064</span>ms ago
Error
    at getStacktraceWithUncaughtError (long-stack-trace-zone.js:<span class="number">24</span>:<span class="number">32</span>)
    at Function.Zone.getStacktrace (long-stack-trace-zone.js:<span class="number">37</span>:<span class="number">15</span>)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:<span class="number">70</span>:<span class="number">43</span>)
    at Zone.<span class="built_in">bind</span> (zones.js:<span class="number">25</span>:<span class="number">21</span>)
    at HTMLButtonElement.obj.addEventListener (zones.js:<span class="number">132</span>:<span class="number">37</span>)
    at Object.x.event.add (jquery.js:<span class="number">5</span>:<span class="number">7262</span>)
    at HTMLButtonElement.&lt;anonymous&gt; (jquery.js:<span class="number">5</span>:<span class="number">14336</span>)
    at Function.x.extend.each (jquery.js:<span class="number">4</span>:<span class="number">4575</span>)
    at x.fn.x.each (jquery.js:<span class="number">4</span>:<span class="number">1626</span>)
    at x.fn.extend.on (jquery.js:<span class="number">5</span>:<span class="number">14312</span>)</code></pre>
<p>What the what?? Cool! We can now see that the relevant code path started in our <code>onClick</code> method and went into <code>thirdPartyFunction</code>.</p>
<p>The cool part is, since <a href="https://github.com/btford/zone.js/">Zone.js</a> overrides browser methods, it doesn&#39;t matter what libraries you use. It just works.</p>
<h2 id="another-async-flow-control-project-called-zones-">Another async flow control project called Zones?</h2>
<p>Yep, StrongLoop’s <a href="https://github.com/piscisaureus">Bert Belder</a> has been working on a similar idea called “<a href="https://www.npmjs.org/package/zone">Zone</a>“ for a few months now. (Not to be confused with the Angular <a href="https://github.com/btford/zone.js/">Zone.js</a> project we&#39;ve just been discussing, which shares the same name and some technical characteristics. Yeah, it’s a little confusing, but we are actively working with <a href="https://github.com/btford">Brian Ford</a> on how to potentially bring together these two projects for the mutual benefit of the JavaScript and Node communities. Stay tuned!)</p>
<h2 id="why-a-node-specific-zones-project-">Why a Node-specific Zones project?</h2>
<p>Currently, there are a couple of problems that make it really hard to deal with asynchronous control flow in Node that Zones looks to address. Specifically:</p>
<ul>
<li>Stack traces are useless when an asynchronous function fails.</li>
<li>Asynchronous functions are hard to compose into more high-level APIs. Imagine implementing a simple asynchronous API like bar(arg1, arg2, cb) where cb is the error-first callback that the user of the API specifies. To implement this correctly you must take care:<ul>
<li>to always call the callback</li>
<li>don’t call the callback more than once</li>
<li>don’t synchronously throw and also call the callback</li>
<li>don’t call the callback synchronously</li>
</ul>
</li>
<li>It is difficult to handle errors that are raised asynchronously. Typically node will crash. If the uses chooses to ignore the error, resources may leak. Zones should make it easy to handle errors and to avoid resource leaks.</li>
<li>Sometimes there is a need to associate user data to an asynchronous flow. There is currently no way to do this.</li>
</ul>
<p>Want to learn more about Zones? Stay tuned for more information in the coming weeks. Follow us on <a href="https://twitter.com/StrongLoop">Twitter</a> or subscribe to our <a href="http://strongloop.com/newsletter-registration/">newsletter</a> to make sure you don’t miss the announcements.</p>
<h2 id="what-s-next-">What&#39;s next?</h2>
<ul>
<li>Watch <a href="http://www.youtube.com/watch?v=3IqtmUscE_U">Brian&#39;s presentation</a> from ngconf 2014, it&#39;s pretty cool!</li>
<li>Add <a href="https://github.com/btford/zone.js/">Zone.js</a> to your application.</li>
<li>Profit!</li>
</ul>
<p><img src="http://goodeggs.github.io/bites/images/posts/promises-trycatch-zones/party.gif"/></p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/promises-trycatch-zones/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/promises-trycatch-zones/</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 09 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[You Forgot About bfcache!]]></title>
            <description><![CDATA[<style>.entry-content img { display: block; margin: 0 auto }</style>

<p>So there we were, putting the polishing touches on our mobile app.  There were a few big bugs that we wanted to clean up before we launched.  One seemed a bit edge-case-y, but still not good: when iPhone users clicked on products and then subsequently clicked back to the product listings, they saw our animated spinner stuck like this:</p>
<p><img src="/images/spin-spin.gif" alt="Waiting for user to reload"></p>
<!-- more -->

<p>It seemed straightforward enough, but it required some researching until we ran across this <a href="https://stackoverflow.com/questions/8788802/prevent-safari-loading-from-cache-when-back-button-is-clicked">stack overflow post</a>.</p>
<p>bfcache, eh?</p>
<p><img src="/images/cosby-huh.gif" alt="bfcache?"></p>
<p>From the Stack Overflow answer:</p>
<blockquote>
<p>&quot;[bfcache] is supposed to save complete state of page when user navigates away.
When user navigates back with back button page can be loaded from cache very quickly.
This is different from normal cache which only caches HTML code.&quot;</p>
</blockquote>
<p>It turns out that all browsers support bfcache, but Mobile Safari sometimes needed a little extra help.  That led us to try something along the lines of this:</p>
<pre class="highlight"><code class="coffeescript">    window.onpageshow, <span class="function"><span class="params">(event)</span> =&gt;</span>
      <span class="keyword">if</span> event.persisted
        overlay.hide() <span class="comment"># Hide the spinner overlay</span></code></pre>
<p>Seemed like it should work, but it didn&#39;t!  After a lot more research and even more a lot more trial-and-error, we noticed we had multiple window.onpageshow assignments.  jQuery to the rescue (yet again)!</p>
<pre class="highlight"><code class="coffeescript">    $<span class="function"><span class="params">(<span class="built_in">window</span>)</span>.<span class="title">on</span> '<span class="title">pageshow</span>', <span class="params">(event)</span> =&gt;</span>
      <span class="keyword">if</span> event.persisted
        overlay.hide()</code></pre>
<p>With our fix in place we were ready to head home and have a beer, right?  Nope!  What if we needed to sneak past bfcache again?  Well how about we move the code to our main Page class and define an overwritable function called onBrowserBack?</p>
<pre class="highlight"><code class="coffeescript">    $<span class="function"><span class="params">(<span class="built_in">window</span>)</span>.<span class="title">on</span> '<span class="title">pageshow</span>', <span class="params">(event)</span> =&gt;</span>
      <span class="keyword">if</span> event.persisted
        overlay.hide()
        <span class="property">@onBrowserBack</span>?()</code></pre>
<p><img src="/images/BOOM.gif" alt="BOOM!"></p>
<p>This turned out to be really useful because the counter of items added to the basket in our navigation menu wasn&#39;t updating either.  We just threw a bit of code into the onBrowserBack function for our product listing page which made a request to get new session data and we&#39;d fixed two bugs with one event.</p>
<p>If you&#39;ve read this far and you&#39;re interested in more on the ins-and-outs of how browsers deal with caching history you&#39;ll probably find <a href="http://madhatted.com/2013/6/16/you-do-not-understand-browser-history">You do not understand browser history</a> interesting and useful!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/you-forgot-about-bfcache/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/you-forgot-about-bfcache/</guid>
            <dc:creator><![CDATA[Brian Underwood]]></dc:creator>
            <pubDate>Wed, 28 May 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[What Are Your Hiring Criteria?]]></title>
            <description><![CDATA[<p>What are the criteria you use when hiring for your team? Have you written them down?</p>
<p>Lots of people think they have clear criteria for hiring but have never taken the time to write them down. Written criteria are an important component of an effective hiring process. In this post I&#39;ll share some guidance on establishing clear criteria, how to use them to design an efficient interview process, and the role they play in developing diversity on your team.</p>
<h2 id="defining-your-hiring-criteria">Defining Your Hiring Criteria</h2>
<p>There are a number strategies you can use to get to your criteria. If you haven&#39;t already you could probably just write them down right now and have something to work with. That&#39;s a fine start. Sharing them with your team for review and revision is likely to make them even better.</p>
<p>Another approach is to actively engage your team in developing your criteria. You can get pretty far with this short exercise.</p>
<ul>
<li>Gather your team in a quiet room</li>
<li>Hand out stickies and sharpies</li>
<li>Give the team 3 minutes to write down the desirable attributes of members of your team, one attribute per sticky</li>
<li>Have each person put their stickies on a wall and form clusters of related items</li>
<li>Give every member of the team 4 votes to <a href="http://martinfowler.com/bliki/DotVoting.html">dot vote</a> their top attributes</li>
</ul>
<p>Do the items with the most votes look like your criteria? You hopefully have a mix of different criteria that cover technical skills, working style, personality traits, domain expertise and more.</p>
<!-- more -->

<p>We did this exercise last year at Good Eggs as part of an effort to improve the hiring process on our engineering team. It had the additional benefit of helping the team better understand the characteristics that we feel define us and our work. It was also the raw input for the development of our <a href="http://bites.goodeggs.com/posts/manifesto/">Software Development Manifesto</a>.</p>
<p>Examples of criteria that came out of that process and that we use today are:</p>
<ul>
<li>Is aligned with our mission to grow and sustain local food systems worldwide</li>
<li>Has strong opinions, weakly held</li>
<li>Has full stack web development experience</li>
</ul>
<p>Even with this short list of criteria you&#39;ll notice that there are differences. The first two can be more easily answered with yes/no while the third really needs to be evaluated on a scale. For us, the first two are also must-haves, while the third is desired but not required.</p>
<p>This is fine. Just be clear on which criteria are must-haves versus which ones you have as criteria because insight into how well a candidate meets that criteria will be important in your hiring decision.</p>
<h2 id="disqualifying-criteria">Disqualifying Criteria</h2>
<p>If a candidate meets any of your disqualifying criteria it means that you will definitely not hire them. Many of your must-have criteria can simply be inverted to create a disqualifier. The useful disqualifiers are the ones that can be easily evaluated and therefore used early in your process. Be sure to call them out in your written criteria and use them in the initial screening of candidates.</p>
<p>At Good Eggs, we consider it a disqualifier if a candidate does not value our mission to grow and sustain local food systems. So we are sure to get an understanding of a candidate&#39;s relation to food and their desire to work on a social cause. If you&#39;re solely interested in Good Eggs because you&#39;re stoked to work with Node.js, it&#39;s not going to work out.</p>
<h2 id="hiring-criteria-and-your-interview-process">Hiring Criteria and Your Interview Process</h2>
<p>The goal of your interview process should be to determine how well a candidate meets your criteria and therefore if you want to invite them to join your team. By the time your interviews are done you should be able to discuss the candidate in relation to each of the criteria.</p>
<p>Before a candidate interviews with our team at Good Eggs, the people who are going to participate in the interview have a short meeting to review our criteria, identify those criteria for which we already have insight and those for which we specifically want to get more. Our existing insights may come from work history, phone conversations, Github...</p>
<p>We&#39;ve designed our interview sessions to give us coverage across all of our criteria. Different interviewers are responsible for getting insight into different criteria. When we pass the candidate from one interview to the next, we tell the next interviewer(s) if we have outstanding questions that we would like them to try to answer.</p>
<p>When we gather to make a decision on how to move forward we use our criteria to have a focused conversation about the strengths and weaknesses of the candidate. Do they meet the criteria for which we require a &quot;yes&quot; and for the others how well did they perform? If we find that we disagree on our evaluation or have failed to gain insight into one or more of our criteria then we may design next steps to get more insight into those specifics.</p>
<p>Occasionally the situation comes up when a candidate appears to meet our criteria yet we are not inclined to make a decision to hire. This is a clear indication that we are using implicit criteria in addition to our explicit written criteria. If you find yourself in this situation, take the time to articulate the reason why you do not want to hire and modify your criteria to include it.</p>
<h2 id="hiring-criteria-and-diversity">Hiring Criteria and Diversity</h2>
<p>The first important step in supporting diversity in hiring is to be sure that you are using explicit rather than implicit criteria. Implicit criteria are too easily subject to personal biases and inconsistent application across candidates. Explicit written criteria can be used consistently for all candidates and are easier to evaluate and revise for inclusiveness.</p>
<p>In February I attended an orientation for <a href="http://code2040.org/">Code 2040</a> hosted at the offices of Andreesen Horowitz. Code 2040 is an organization that creates internship opportunities in Silicon Valley for black and latino engineering students from across the country. We are thrilled to have a Code 2040 alum, Estefanía Ortiz, joining us an intern for summer 2014.</p>
<p>Ben Horowitz is a supporter and board member of Code 2040. When asked for his thoughts on general strategies for improving diversity on teams he talked about hiring criteria in a way that helped to expand my thinking and appreciate the value of the criteria we already had in place. He said that a common approach to increasing diversity on a team is to effectively lower the standards for hiring. Hiring managers think that in order to make positions available to more people they need to lower their bar. This approach is a poor one because neither a new hire nor the existing team is happy knowing that the bar has been lowered.</p>
<p>A much better approach is to change your criteria so as to be more inclusive without lowering your high standards.</p>
<p>Our requirement that candidates are aligned with our mission to grow and sustain local food systems is interesting to evaluate in this light. In many communities in this country basic groceries are hard enough to find, let alone the amazing local and organic produce we enjoy in California. Some immigrants come from communities that have existing strong food cultures so have less experience with the ills of industrial food in this country.</p>
<p>We used to require that team members demonstrate passion for fixing food in this country and a personal commitment to our mission. We&#39;ve been able to grow an amazing team with that focus but we strive to be more inclusive as we continue to grow. We&#39;ve realized that what really matters is that members of our team want their work to be toward making positive change in the world and see aligning themselves with Good Eggs as a way to meet that need. It&#39;s a subtle change but opens the door to many more amazing people who want to help us achieve our mission.</p>
<h2 id="how-to-apply-this-to-your-own-team">How To Apply This To Your Own Team</h2>
<p>It&#39;s pretty easy to put these suggestions into practice.</p>
<ol>
<li>Write down your criteria</li>
<li>Revise with feedback from your team</li>
<li>Ensure that you get insight into your criteria through your interview process</li>
<li>Evaluate your candidates against your criteria when making hiring decisions</li>
<li>Revise your criteria when you find yourself using implicit criteria in your decisions</li>
<li>Periodically reevaluate your criteria for inclusiveness and hidden biases</li>
</ol>
<p>If you have additional suggestions on how to create and use effective hiring criteria I&#39;d love to hear from you in the comments.</p>
<blockquote>
<p>This post also appeared on <a href="http://www.sequoiacap.com/grove/posts/eaqj/what-are-your-hiring-criteria">Sequoia Grove</a> April 30, 2014.</p>
</blockquote>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/written-hiring-criteria/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/written-hiring-criteria/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 29 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Rivets for Mobile Web]]></title>
            <description><![CDATA[<div class="series">
    <blockquote>This is the second article in a series of posts detailing the launch of our mobile site.</blockquote>
    <ol>
        <li><a href="/posts/good-eggs-goes-mobile">Good Eggs Goes Mobile</a></li>
        <li><a href="/posts/rivets-for-mobile">Rivets for Mobile Web</a></li>
        <li><a href="/posts/mobile-page-load">Planning Page Load Sequence</a></li>
        <li>HTTP Caching with Fastly</li>
        <li>Appropriate image sizes with imgix</li>
        <li>Integration testing over unit testing</li>
    </ol>
</div>

<p>Before coding a phone-sized farmer&#39;s market, the Good Eggs team built
production sites using tools at both extremes of the javascript application
ecosystem:  Backbone for our desktop experience and Angular for our internal tools.
But neither felt quite right for our mobile site.</p>
<p>We had two priorities for our mobile toolchain: <!-- more -->the page had to load
fast, and we had to code ... efficiently. <a href="http://www.rivetsjs.com/">Rivets</a> with its
declarative data-binding and simple hooks for server-side pre-rendering fit the task well.</p>
<h2 id="backbone-no">Backbone, No</h2>
<p>Backbone had few constraints.  You could imagine a fast page load sequence using it.  For us, it really lost points for developer friendliness.  A seemingly small but pervasive example: <code>Model.get()</code>.  It interrupts my javascript flow.  Do I need <code>.get</code> or just <code>.</code> to traverse this object graph?  Combining <code>get</code> with nested models and objects is especially convoluted.  My mind frequnetly cycled though the permutations: <code>model.get(&#39;address.zip&#39;)</code>, <code>model.get(&#39;address&#39;).get(&#39;zip&#39;)</code>, or <code>model.get(&#39;address&#39;).zip</code> ?  Luckily, recent Android and iOS devices already totalled 85% of our mobile traffic, so we were comfortable relying on ES5&#39;s <code>Object.defineProperty</code> to unlock Rivets native change detection syntax.</p>
<h2 id="angular-not-yet">Angular, Not Yet</h2>
<p>Angular suffered on page load performance.  Following library conventions, we&#39;d have to wait for 100+k of javascript to load, parse, and execute before we could show much of value to our visitor.  Inspired by Bryan McQuade&#39;s <a href="http://calendar.perfplanet.com/2012/make-your-mobile-pages-render-in-under-one-second/">perscription for a fast mobile page</a>, we decided this was unacceptable.  Angular&#39;s declarative binding did speed up code slinging and generate good vibes on projects that used it, so we were glad to discover Rivets&#39;  similar bindings with fewer strong opinions and a much lighter pageweight.</p>
<h2 id="rivets-use-it-now">Rivets, Use it Now</h2>
<p><a href="http://www.rivetsjs.com/">Rivets</a> is very limited in scope.  With it, you get binding and a little bit of formatting.  That&#39;s it.  We had to decide many more architectural conventions like when to bind and what to bind to (stay tuned for a forthcoming post detailing the page load sequence we settled on).  Two Rivets details emerged worth sharing: binding and nesting contexts.</p>
<p><img src="/images/mobile-screenshot.jpg" alt="Mobile screenshot"></p>
<p>In browsers supporting <code>Object.defineProperty</code>, Rivets will bind to any object.  Rivets docs refer to this object as the context.  We bound simple views directly to domain models.  For more complex views, we wrapped up interaction logic in objects reminiscent of Angular scopes.  These objects exposed methods to be called from bindings or tests.  Consider your shopping basket.  We sum the number of treats you&#39;re getting into a total displayed in the top right corner.  This count is maintained by a binding directly to a basket model.  When you click a plus button, a rivets binding invokes a method on the bound basket model. The same model bound to the view.  These two conventions let us wire up simple bindings with minimal boilerplate (no deciding when to render and re-render) and gave us an expected place to add and test more complex wiring.</p>
<p>The behavior of the top 50 or so pixels of the mobile site, call it the top bar, changes a lot.  That&#39;s valuable space on a small screen.  We broke the behaviors into several contexts to prevent the complexity from exploding our brains.  Binding multiple contexts to the same DOM tree with Rivets isn&#39;t totally straightforward, but it&#39;s very doable.  Out of the box, when you bind a context to an element, all children elements are bound to the same context. For us, this meant that the basket bindings got the top nav context instead of the basket model. Boom.  Broken.  Luckily Rivets lets you declare custom prefixes for your bindings.  We adopted a convention of prefixing each binding with the name of the context.  This let us bind <code>rv-top-nav-*</code> as soon as the page loaded, and bind <code>rv-basket-*</code> on nested elements later.</p>
<pre class="highlight"><code class="coffeescript">div <span class="string">'rv-top-nav-show'</span>: <span class="string">'state | is full'</span>,<span class="function"> -&gt;</span>
  a <span class="string">'.logo'</span>, <span class="attribute">href</span>: <span class="string">"/"</span>,<span class="function"> -&gt;</span>
      i <span class="string">'.icon.icon-logo'</span>, <span class="attribute">alt</span>: <span class="string">'good eggs'</span>

  <span class="comment"># other top nav code ...</span>

  a <span class="string">'#basket.icon'</span>, <span class="attribute">href</span>: <span class="string">"/basket"</span>,<span class="function"> -&gt;</span>
    i <span class="string">'.icon.icon-basket'</span>
    div <span class="string">'.items-count'</span>, <span class="string">'rv-basket-text'</span>: <span class="string">'itemsCount'</span>, <span class="string">'0'</span></code></pre>
<p>And then binding to our objects:</p>
<pre class="highlight"><code class="coffeescript">module.<span class="function"><span class="title">exports</span> = -&gt;</span>
  <span class="attribute">state</span>: <span class="string">'full'</span>

  <span class="attribute">bind</span>:<span class="function"> -&gt;</span>
    <span class="property">@el</span> = $(<span class="string">'.top-nav'</span>)

    rivets.bind <span class="property">@el</span>.toArray(), @,
      <span class="attribute">config</span>:
        <span class="attribute">prefix</span>: <span class="string">'rv-top-nav'</span>

    @

  <span class="attribute">bindToSession</span>: <span class="function"><span class="params">(session)</span> -&gt;</span>
    <span class="property">@user</span> = session.user

    rivets.bind $(<span class="string">'#basket'</span>).toArray(), session.basket
      <span class="attribute">config</span>:
        <span class="attribute">prefix</span>: <span class="string">'rv-basket'</span>

    @</code></pre>
<p>Rivets declarative binding rocks for mobile web.  Try it out!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/rivets-for-mobile/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/rivets-for-mobile/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Fri, 25 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Good Eggs Goes Mobile]]></title>
            <description><![CDATA[<div class="series">
    <blockquote>This is the first article in a series of posts detailing the launch of our mobile site.</blockquote>
    <ol>
        <li><a href="/posts/good-eggs-goes-mobile">Good Eggs Goes Mobile</a></li>
        <li><a href="/posts/rivets-for-mobile">Rivets for Mobile Web</a></li>
        <li><a href="/posts/mobile-page-load">Planning Page Load Sequence</a></li>
        <li>HTTP Caching with Fastly</li>
        <li>Appropriate image sizes with imgix</li>
        <li>Integration testing over unit testing</li>
    </ol>
</div>


<p>In the past 6 months, 25% of our traffic came from mobile devices, and those users faced a
daunting, near impossible shopping experience. In response, we launched a new
mobile version of <a href="http://goodeggs.com">goodeggs.com</a> two weeks ago with an
eye to simplify our major use case of filling your basket with products and
checking out. To create the mobile experience we considered three options:</p>
<ol>
<li>native mobile apps for iOS and Android</li>
<li>a responsive re-design of our existing website</li>
<li>building a mobile website from scratch</li>
</ol>
<!-- more -->

<h3 id="native-someday">Native Someday</h3>
<p>While native mobile apps offer the potential for a superior user experience, our
first priority was handling the 25% of traffic already coming to our website.
Even with a nagging banner to download a native app, we&#39;d still have users
visiting our site on mobile devices. Additionally, we wanted to be able to
iterate quickly on the mobile platform and not be at the whim of the App Store&#39;s
approval process nor users&#39; responsibilities to install updates.</p>
<h3 id="not-responsive-enough">Not Responsive Enough</h3>
<p>We also ruled out a responsive design pretty quickly. Our requirements for the
mobile application were to deliver a fast and simple experience. With such small
screen real estate on the phone, we knew we wanted to completely rethink the
layouts and content of our pages; a little too complex for fluid grids, and
media queries.</p>
<h3 id="fresh-start">Fresh Start</h3>
<p>Instead of continuing with our &quot;desktop&quot; stack built on
<a href="http://backbonejs.org/">Backbone</a>, we decided to take the opportunity for a fresh start.
With <a href="http://backbonejs.org/">Backbone</a>,
<a href="http://angularjs.org/">Angular</a>, <a href="http://emberjs.com/">Ember</a>, and other client
side frameworks, the user has to wait for the JavaScript to be loaded before any
client side rendering can begin, and we really wanted to prioritize initial page load.
We decided for our use cases, we could deliver a better experience by generating HTML on the server side so the phone
can begin rendering as soon as it starts receiving data from the initial request.</p>
<p>In the coming weeks, we&#39;ll be taking a deeper dive on some of the major
architectural decisions we made. Check back to learn about:</p>
<ul>
<li><p><strong>Rivets instead of Backbone/Angular/etc.</strong>
<a href="http://www.rivetsjs.com/">Rivets</a>, turned out to be just the right size for this project.  Its simple hooks for server-side pre-rendering, Angular inspired declarative binding, and small pageweight helped us get commits in fast and deliver tiny snacks to pocket-sized screens at speeds approaching our sub-second dreams.</p>
</li>
<li><p><strong>Planning page load sequence for faster initial page load</strong>
To get food on the screen quickly, we considered each step of the page load cycle: the first packet through user-specific javascript execution.</p>
</li>
<li><p><strong>HTTP Caching with <a href="https://www.fastly.com/">Fastly</a></strong>
Especially with server-side generated HTML, we knew HTTP caching would be our best bet for fast page loads. By normalizing our request headers, separating session information into separate AJAX calls, and setting appropriate cache headers, we achieved significant performance gains.</p>
</li>
<li><p><strong>Appropriate image sizes with <a href="http://www.imgix.com/">imgix</a></strong>
Folks really seem to <em>get</em> GoodEggs when they can see the food.  The photos are very very very important.  Modern iPhones have dense displays that demand high quality photos, but their networks are often strained.  We&#39;ve found a balance.</p>
</li>
<li><p><strong>Integration testing over unit testing</strong>
We skipped adding unit tests on browser and express controller code in all but the most critical cases, minimizing the overhead of making sweeping changes, which we made frequently while figuring out our new Rivets-based architecture. Browser based integration tests assured us that shoppers could still experience their journeys after our changes. They were a huge help and a small burden.</p>
</li>
</ul>
<p>And in the meanwhile, go take a look at <a href="http://goodeggs.com">goodeggs.com</a> in a mobile device and let us know what you think!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/good-eggs-goes-mobile/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/good-eggs-goes-mobile/</guid>
            <dc:creator><![CDATA[Michael Kebbekus and Adam Hull]]></dc:creator>
            <pubDate>Fri, 11 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JS Hack for Good with JSFest]]></title>
            <description><![CDATA[<p>We&#39;re partnering with <a href="http://jsfest.com">JSFest</a> to host a JavaScript hack night for social good on Sunday evening March 9. JSFest runs March 6-12 in San Francisco.</p>
<p>Let&#39;s spend a few hours hacking together to make the world a better place. Bring your project or your desire to help others with theirs. Open source and socially-minded projects are all welcome. If you want to give a short presentation or run a mini workshop we have the facilities and welcome your initiative.</p>
<p>We&#39;ll kick off with project intros and requests for help to connect hackers with the projects they are interested in.</p>
<p>Start at 6pm with some great local food and drink to help us all connect, kick off at 6:30pm and doors close at 10:00pm.
A few folks from Good Eggs with expertise in Node, Backbone, Angular, MongoDB and more will be around to help and with some projects of their own.</p>
<p><a href="http://www.meetup.com/cultivate/events/167399892/">Reserve your spot</a> and we&#39;ll see you Sunday!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/js-hack-for-good/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/js-hack-for-good/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 04 Mar 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Good Eggs Software Development Manifesto]]></title>
            <description><![CDATA[<p>At Good Eggs we are on a mission <em>to grow and sustain local food systems worldwide</em>. Everyone in the company is here because they believe in this mission and our vision for a better future.</p>
<p>So how does this apply to our work as an engineering team and what other core values keep us aligned, excited and productive? We took some time to articulate our values as a team which I am presenting here as a first draft of our Software Development Manifesto.</p>
<!-- more -->

<h2 id="we-believe">We believe</h2>
<p><em>We believe</em> that technology can be used to make the world a better place.</p>
<p><em>We believe</em> in building beautiful things that improve people’s lives.</p>
<p><em>We believe</em> that when given an opportunity to create positive change, you act on it.</p>
<p><em>We believe</em> in the value of exploration and innovation.</p>
<p><em>We believe</em> that reshaping our food system is a direct way to care for people and our planet.</p>
<h2 id="what-we-do">What we do</h2>
<p><strong>We create change</strong><br/>
We’re building software to power a new, alternative food system: One that supports high-integrity farmers and foodmakers and enables them to compete with the industrial food complex. A system that helps all families eat well and enables them to support the future they want to see. A system where the folks doing things right are the ones who succeed.</p>
<p><strong>We make real things with real impact</strong><br/>
Yesterday we were writing the code for a new application now being tested by local farmers. Tomorrow we’ll be collecting feedback and improving on it. We’re constantly delivering new experiences and tools into the hands of our customers and producers, all of which are designed to make their lives easier.</p>
<p><strong>We’re tackling hard problems</strong><br/>
Working with food is complex with lots of variables to solve for, from weather patterns to traffic patterns. We’re innovating across the worlds of online retail, inventory management and delivery logistics to name a few, and are constantly working to make our systems and processes work even better.</p>
<h2 id="how-we-do-it">How we do it</h2>
<p><strong>We use radical tools for radical change</strong><br/>
We&#39;re members of and contributors to an open source community that is defining new ways to build applications with Node.js and full stack JavaScript. We&#39;re adventurous and use technologies that inspire us to innovate and solve problems in new ways.</p>
<p><strong>We stay nimble</strong><br/>
We work quickly because the faster we can get a solution in someone’s hands, the faster we can learn how to make it better. We test and automate with rigor so that mundane tasks don&#39;t slow us down.</p>
<p><strong>We continuously improve</strong><br/>
There is no best way, only better and better ways. We&#39;re building systems that handle complexity in the real world by creating visibility at every stage of the process. We’re empowering the people involved to solve problems when and where they happen.</p>
<p>It’s the technology at the heart of Good Eggs that will enable us to scale and make real change. We’re using technology to think big in service of the small. We’re building the systems that help local farmers sell enough to actually make a living. We’re creating efficient logistics that mean parents can trade a trip to the grocery store for time to read the kids another bedtime story. We’re fueling a food system that will feed everyone well, and we’re psyched to be doing it. Because the better we work, the better the world we all live in.</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/manifesto/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/manifesto/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 25 Feb 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Export This: Interface Design Patterns for Node.js Modules]]></title>
            <description><![CDATA[<p>When you require a module in Node, what are you getting back? When you write a module, what options do you have for designing its interface?</p>
<p>When I was first learning to work in Node I found the sheer number of ways to do things to be a bit overwhelming. JavaScript is extremely flexible and the community of developers contributing to open source seem to have different styles for implementing the same thing.</p>
<p>On my journey with Node I&#39;ve been keeping an eye out the Good Way to do things and adopting them for use in my own work and in our work at Good Eggs.</p>
<p>In this post I&#39;ll share my observations of the Node module system and the ways in which you can use it to encapsulate and share code. My goal is to identify and illustrate useful patterns for module interface design and to help you understand when and how to use them in your own work.</p>
<p>I discuss seven patterns below, many of which can be used in combination. They are:</p>
<ul>
<li><a href="/posts/export-this#namespace">Exports a Namespace</a></li>
<li><a href="/posts/export-this#function">Exports a Function</a></li>
<li><a href="/posts/export-this#higher_order_function">Exports a Higher Order Function</a></li>
<li><a href="/posts/export-this#constructor">Exports a Constructor</a></li>
<li><a href="/posts/export-this#singleton">Exports a Singleton</a></li>
<li><a href="/posts/export-this#global_object">Extends a Global Object</a></li>
<li><a href="/posts/export-this#monkey_patch">Applies a Monkey Patch</a></li>
</ul>
<!-- more -->

<h2 id="require-exports-and-module-exports">require, exports and module.exports</h2>
<p>First some fundamentals.</p>
<p>In Node requiring a file is requiring the module it defines. All modules have a reference to an implicit <code>module</code> object whose property <code>module.exports</code> is what is returned when you call <code>require</code>. A reference to <code>module.exports</code> is also available as <code>exports</code>.</p>
<p>It&#39;s as if there were an implicit line at the beginning of each module that reads:</p>
<pre class="highlight"><code class="coffeescript"><span class="reserved">var</span> <span class="built_in">exports</span> = module.<span class="built_in">exports</span> = {};</code></pre>
<p>If you want to export a function, you have to assign it to <code>module.exports</code>. Assigning a function to <code>exports</code> would just reassign the <code>exports</code> reference but <code>module.exports</code> would still point at the original empty object.</p>
<p>So we can define a module <code>function.js</code> that exports a function:</p>
<pre class="highlight"><code class="matlab"><span class="transposed_variable">module.</span>exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="cell">{name: <span class="string">'Jane'</span>}</span>;
};</code></pre>
<p>and require it with:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> func = <span class="keyword">require</span>(<span class="string">'./function'</span>);</code></pre>
<p>An important behavior of <code>require</code> is that it caches the value of <code>module.exports</code> and returns that same value for all future calls to <code>require</code>. It caches based on the absolute file path of the required file. So if you want your module to be able to return different values, you should have it export a function that can then be invoked to return a new value.</p>
<p>To demonstrate with the Node REPL:</p>
<pre class="highlight"><code class="delphi">$ node
&gt; f1 = require(<span class="string">'/Users/alon/Projects/export_this/function'</span>);
[<span class="function"><span class="keyword">Function</span>]
&gt; <span class="title">f2</span> = <span class="title">require</span><span class="params">(<span class="string">'./function'</span>)</span>;</span> <span class="comment">// Same location</span>
[<span class="function"><span class="keyword">Function</span>]
&gt; <span class="title">f1</span> === <span class="title">f2</span>
<span class="title">true</span>
&gt; <span class="title">f1</span><span class="params">()</span> === <span class="title">f2</span><span class="params">()</span>
<span class="title">false</span></span></code></pre>
<p>You can see that <code>require</code> is returning the same function instance but that the objects returned by that function are different instances for each call.</p>
<p>For more detail on Node&#39;s module system <a href="http://nodejs.org/api/modules.html">the core docs</a> provide good detail and are worth a read.</p>
<p>And now on to the interface patterns.</p>
<p><a name='namespace'></a></p>
<h2 id="exports-a-namespace">Exports a Namespace</h2>
<p>A simple and common pattern is to export an object with a number of properties, primarily but not limited to functions. This allows the code requiring the module to pull in a collection of related functionality under a single namespace.</p>
<p>When you require a module that exports a namespace, you&#39;ll usually either assign the entire namespace to a variable and use its members through that reference, or assign members directly to local variables:</p>
<pre class="highlight"><code class="scilab">var fs = require(<span class="string">'fs'</span>),
    readFile = <span class="transposed_variable">fs.</span>readFile,
    ReadStream = <span class="transposed_variable">fs.</span>ReadStream;

readFile(<span class="string">'./file.txt'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span> {</span>
  <span class="transposed_variable">console.</span>log(<span class="string">"readFile contents: '</span>%<span class="transposed_variable">s'</span><span class="string">", data);
});

new ReadStream('</span>./<span class="transposed_variable">file.</span><span class="transposed_variable">txt'</span>).on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
  <span class="transposed_variable">console.</span>log(<span class="string">"ReadStream contents: '</span>%<span class="transposed_variable">s'</span><span class="string">", data);
});</span></code></pre>
<p>Here&#39;s what the <a href="https://github.com/joyent/node/blob/e5346932bcbc523489c9418b82fde31cb666ee99/lib/fs.js#L33"><code>fs</code> core module</a> is doing:</p>
<pre class="highlight"><code class="coffeescript"><span class="reserved">var</span> fs = <span class="built_in">exports</span>;</code></pre>
<p>It first assigns the local variable <code>fs</code> to the implicit exports object and then assigns function references to properties of <code>fs</code>. Because <code>fs</code> references <code>exports</code> and exports is the object you get when you call <code>require(&#39;fs&#39;)</code> anything assigned to <code>fs</code> will be available on the object you get from <code>require</code>.</p>
<pre class="highlight"><code class="r">fs.readFile = <span class="keyword">function</span>(path, options, callback_) {
  // <span class="keyword">...</span>
};</code></pre>
<p>Anything is fair game. It then exports a constructor:</p>
<pre class="highlight"><code class="r">fs.ReadStream = ReadStream;

<span class="keyword">function</span> ReadStream(path, options) {
  // <span class="keyword">...</span>
}
ReadStream.prototype.open = <span class="keyword">function</span>() {
  // <span class="keyword">...</span>
}</code></pre>
<p>When exporting a namespace, you can assign properties to <code>exports</code> as the <code>fs</code> module does above, or assign a new object to <code>module.exports</code>.</p>
<pre class="highlight"><code class="r">module.exports = {
  version: <span class="string">'1.0'</span>,

  doSomething: <span class="keyword">function</span>() {
    //<span class="keyword">...</span>
  }
}</code></pre>
<p>A common use of exporting a namespace is to export the root of another module so that one require statement gives the caller access to a number of other modules. At Good Eggs, we implement each of our domain models in a separate module that exports the model constructor (see <a href="#constructor">Exports a Constructor</a> below) and then have an index file in the directory where the models live that exports all of the models. This allows us to pull in our models under a <code>models</code> namespace.</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> models = <span class="keyword">require</span>(<span class="string">'./models'</span>),
    User = models.User,
    Product = models.Product;</code></pre>
<p>For CoffeeScript users, <a href="http://coffeescript.org/#destructuring">destructuring assignment</a> make this even cleaner.</p>
<pre class="highlight"><code class="ruby">{<span class="constant">User</span>, <span class="constant">Product</span>} = <span class="keyword">require</span> <span class="string">'./models'</span></code></pre>
<p><code>index.js</code> might look like:</p>
<pre class="highlight"><code class="ruby">exports.<span class="constant">User</span> = <span class="keyword">require</span>(<span class="string">'./user'</span>);
exports.<span class="constant">Person</span> = <span class="keyword">require</span>(<span class="string">'./person'</span>);</code></pre>
<p>In reality, we use a small library that requires all sibling files and exports their modules with CamelCase names so the <code>index.js</code> file in our models directory actually reads:</p>
<pre class="highlight"><code class="ruby"><span class="keyword">module</span>.exports = <span class="keyword">require</span>(<span class="string">'../lib/require_siblings'</span>)(__filename);</code></pre>
<p><a name='function'></a></p>
<h2 id="exports-a-function">Exports a Function</h2>
<p>Another pattern is to export a function as the interface to a module. A common use of this pattern is to export a factory function that returns an object when invoked. We see this when using <a href="http://expressjs.com">Express.js</a>:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);
<span class="keyword">var</span> app = express();

app.get(<span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  res.send <span class="string">"Hi there! We're using Express v"</span> + express.version;
});</code></pre>
<p>The function exported by Express is used to create a new Express application. In your own use of this pattern, your factory function may take arguments used to configure or initialize the object returned.</p>
<p>To export a function, you must assign your function to module.exports. <a href="https://github.com/visionmedia/express/blob/2e68ddbae9cec2d0b22f48f35ef4da964f51949e/lib/express.js#L18">Express does</a>:</p>
<pre class="highlight"><code class="r">exports = module.exports = createApplication;

<span class="keyword">...</span>

<span class="keyword">function</span> createApplication () {
  <span class="keyword">...</span>
}</code></pre>
<p>It&#39;s assigning the <code>createApplication</code> function to <code>module.exports</code> and then to the implicit <code>exports</code> variable. Now <code>exports</code> is the function that the module exports.</p>
<p>Express also uses this exported function as a namespace:</p>
<pre class="highlight"><code class="haskell"><span class="title">exports</span>.version = '<span class="number">3.1</span><span class="number">.1</span>';</code></pre>
<p>Note that there&#39;s nothing to stop us from using the exported function as a namespace that can expose references to other functions, constructors or objects serving as namespaces themselves.</p>
<p>When exporting a function, it is good practice to name the function so that it will show up in stack traces. Note the stack trace differences in these two examples:</p>
<pre class="highlight"><code class="javascript"><span class="comment">// bomb1.js</span>
module.exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'boom'</span>);
};</code></pre>
<pre class="highlight"><code class="javascript"><span class="comment">// bomb2.js</span>
module.exports = <span class="function"><span class="keyword">function</span> <span class="title">bomb</span><span class="params">()</span> {</span>
  <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'boom'</span>);
};</code></pre>
<pre class="highlight"><code class="r">$ node
&gt; bomb = <span class="keyword">require</span>(<span class="string">'./bomb1'</span>);
[Function]
&gt; bomb()
Error: boom
    at module.exports (/Users/alon/Projects/export_this/bomb1.js:<span class="number">2</span>:<span class="number">9</span>)
    at repl:<span class="number">1</span>:<span class="number">2</span>
    <span class="keyword">...</span>
&gt; bomb = <span class="keyword">require</span>(<span class="string">'./bomb2'</span>);
[Function: bomb]
&gt; bomb()
Error: boom
    at bomb (/Users/alon/Projects/export_this/bomb2.js:<span class="number">2</span>:<span class="number">9</span>)
    at repl:<span class="number">1</span>:<span class="number">2</span>
    <span class="keyword">...</span></code></pre>
<p>There are a couple specific cases of exporting a function that are worth calling out as distinct patterns.</p>
<p><a name='higher_order_function'></a></p>
<h2 id="exports-a-higher-order-function">Exports a Higher Order Function</h2>
<p>A higher-order function, or functor, is a function that  takes one or more functions as an input and/or outputs a function. We&#39;re talking about the latter case - a function that returns a function.</p>
<p>Exporting a higher order function is a useful pattern when you want to return a function from your module but need to take input that controls the behavior of that function.</p>
<p><a href="http://www.senchalabs.org/connect/">Connect middleware</a> provide a lot of pluggable functionality for Express and other web frameworks. A middleware is a function that takes three arguments - <code>(req, res, next)</code>. The convention in connect middleware is to export a function that when called returns the middleware function. This allows the exported function to take arguments that can be used to configure the middleware and are available through closure scope to the middleware when it is handling a request.</p>
<p>For example, here&#39;s the connect <a href="http://www.senchalabs.org/connect/query.html"><code>query</code> middleware</a> used internally by Express to parse query string parameters into a an object available as <code>req.query</code>.</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> connect = <span class="keyword">require</span>(<span class="string">'connect'</span>),
    query = <span class="keyword">require</span>(<span class="string">'connect/lib/middleware/query'</span>);

<span class="keyword">var</span> app = connect();
app.<span class="keyword">use</span>(query({maxKeys: <span class="number">100</span>}));</code></pre>
<p>The <code>query</code> source looks like:</p>
<pre class="highlight"><code class="scilab">var qs = require(<span class="string">'qs'</span>)
  , parse = require(<span class="string">'../utils'</span>).parseUrl;

<span class="transposed_variable">module.</span>exports = <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(options)</span>{</span>
  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(req, res, next)</span>{</span>
    <span class="keyword">if</span> (!<span class="transposed_variable">req.</span>query) {
      <span class="transposed_variable">req.</span>query = ~<span class="transposed_variable">req.</span><span class="transposed_variable">url.</span>indexOf(<span class="string">'?'</span>)
        ? <span class="transposed_variable">qs.</span>parse(parse(req).query, options)
        : {};
    }

    next();
  };
};</code></pre>
<p>For every request handled by the <code>query</code> middleware, the <code>options</code> argument available through closure scope is passed along to Node&#39;s core <code>qs</code> (query string) module.</p>
<p>This is a common and very flexible pattern for module design and one you are likely to find very useful in your own work.</p>
<p><a name='constructor'></a></p>
<h2 id="exports-a-constructor">Exports a Constructor</h2>
<p>We define classes in JavaScript with constructor functions and create instances of classes with the <code>new</code> keyword.</p>
<pre class="highlight"><code class="scilab"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> {</span>
  <span class="transposed_variable">this.</span>name = name;
}

<span class="transposed_variable">Person.</span><span class="transposed_variable">prototype.</span>greet = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="string">"Hi, I'</span>m <span class="transposed_variable">Jane.</span><span class="string">";
};

var person = new Person('</span><span class="transposed_variable">Jane'</span>);
<span class="transposed_variable">console.</span>log(<span class="transposed_variable">person.</span>greet()); <span class="comment">// prints: Hi, I'm Jane</span></code></pre>
<p>For this pattern implement a class-per-file and export the constructor to make your project organization clear and to make it easy for other developers to find the implementation of a class. At Good Eggs, we implement classes in files with underscore_names and assign them to CamelCase names.</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> Person = <span class="keyword">require</span>(<span class="string">'./person'</span>);

<span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Jane'</span>);</code></pre>
<p>The implementation might look like:</p>
<pre class="highlight"><code class="scilab"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> {</span>
  <span class="transposed_variable">this.</span>name = name;
}

<span class="transposed_variable">Person.</span><span class="transposed_variable">prototype.</span>greet = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="string">"Hi, I'</span>m <span class="string">" + this.name;
};

module.exports = Person;</span></code></pre>
<p><a name='singleton'></a></p>
<h2 id="exports-a-singleton">Exports a Singleton</h2>
<p>Export a <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> when you want all users of your module to share the state and behavior of a single class instance.</p>
<p><a href="http://mongoosejs.com">Mongoose</a> is an object-document mapping library used to create rich domain models persisted in MongoDB.</p>
<pre class="highlight"><code class="r">var mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>);
mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);

var Cat = mongoose.model(<span class="string">'Cat'</span>, { name: String });

var kitty = new Cat({ name: <span class="string">'Zildjian'</span> });
kitty.save(<span class="keyword">function</span> (err) {
  <span class="keyword">if</span> (err) // <span class="keyword">...</span>
  console.log(<span class="string">'meow'</span>);
});</code></pre>
<p>What is that <code>mongoose</code> object we get back when we require Mongoose? Internally, the <code>mongoose</code> module is doing:</p>
<pre class="highlight"><code class="r"><span class="keyword">function</span> Mongoose() {
  //<span class="keyword">...</span>
}

module.exports = exports = new Mongoose();</code></pre>
<p>Because <code>require</code> caches the value assigned to <code>module.exports</code>, all calls to <code>require(&#39;mongoose&#39;)</code> will return this same instance ensuring that it is a singleton in our application. Mongoose uses an object-oriented design to encapsulate and decouple functionality, maintain state and support readability and comprehension, but creates a simple interface to users by creating and exporting an instance of the Mongoose class.</p>
<p>It also uses this singleton instance as a namespace to make other constructors available if needed by the user, including the Mongoose constructor itself. You might use the <code>Mongoose</code> constructor to create additional instances of mongoose connecting to additional MongoDB databases.</p>
<p>Internally, Mongoose does:</p>
<pre class="highlight"><code class="avrasm">Mongoose<span class="preprocessor">.prototype</span><span class="preprocessor">.Mongoose</span> = Mongoose<span class="comment">;</span></code></pre>
<p>So that you can do:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>),
    Mongoose = mongoose.Mongoose;

<span class="keyword">var</span> myMongoose = <span class="keyword">new</span> Mongoose();
myMongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</code></pre>
<p><a name='global_object'></a></p>
<h2 id="extends-a-global-object">Extends a Global Object</h2>
<p>A required module can do more than just export a value. It can also modify global objects or objects returned when requiring other modules. It can define new global objects. It can just do this or do this in addition to exporting something useful.</p>
<p>Use this pattern when you need to extend or alter the behavior of global objects to provide the behavior delivered by your module. While certainly controversial and to be used judiciously (especially in open source work), this pattern can also be indispensable.</p>
<p><a href="https://github.com/visionmedia/should.js">Should.js</a> is an assertion library designed to be used in unit testing:</p>
<pre class="highlight"><code class="matlab">require(<span class="string">'should'</span>);

var user = <span class="cell">{
    name: <span class="string">'Jane'</span>
}</span>;

<span class="transposed_variable">user.</span><span class="transposed_variable">name.</span><span class="transposed_variable">should.</span>equal(<span class="string">'Jane'</span>);</code></pre>
<p>Should.js <a href="https://github.com/visionmedia/should.js/blob/68000f47d01408cacb80441a1d9bf10ba423e54c/lib/should.js#L107-L113">extends Object with a non-enumerable property <code>should</code></a> to provide a clean syntax for writing unit test asserts. Internally, <code>should.js</code> does:</p>
<pre class="highlight"><code class="r">var should = <span class="keyword">function</span>(obj) {
  <span class="keyword">return</span> new Assertion(util.isWrapperType(obj) ? obj.valueOf(): obj);
};

//<span class="keyword">...</span>

exports = module.exports = should;

//<span class="keyword">...</span>

Object.defineProperty(Object.prototype, <span class="string">'should'</span>, {
  set: <span class="keyword">function</span>(){},
  get: <span class="keyword">function</span>(){
    <span class="keyword">return</span> should(this);
  },
  configurable: true
});</code></pre>
<p>Note that while Should.js exports the <code>should</code> function its primary use is through the <code>should</code> function it has added to <code>Object</code>.</p>
<p><a name='monkey_patch'></a></p>
<h2 id="applies-a-monkey-patch">Applies a Monkey Patch</h2>
<p>By <a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a> I&#39;m referring to &quot;the dynamic modifications of a class or module at runtime, motivated by the intent to patch existing third-party code as a workaround to a bug or feature which does not act as desired.&quot;</p>
<p>Implement a module to patch an existing module when it doesn&#39;t provide an interface to customizing its behavior in the way you need. This pattern is a variant of the previous. Instead of modifying a global object, we are relying on the caching behavior of Node&#39;s module system to patch the same instance of a module that other code gets when it requires that module.</p>
<p>By default Mongoose names MongoDB collections by lowercasing and pluralizing the model name. For a model named <code>CreditCardAccountEntry</code> we&#39;d end up with a collection named <code>creditcardaccountentries</code>. I prefer <code>credit_card_account_entries</code> and I want this behavior universally.</p>
<p>Here&#39;s the source for a module that patches <code>mongoose.model</code> when the module is required:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> Mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>).Mongoose;
<span class="keyword">var</span> _ = <span class="keyword">require</span>(<span class="string">'underscore'</span>);

<span class="keyword">var</span> model = Mongoose.prototype.model;
<span class="keyword">var</span> modelWithUnderScoreCollectionName = <span class="function"><span class="keyword">function</span><span class="params">(name, schema, collection, skipInit)</span> {</span>
  collection = collection || _(name).chain().underscore().pluralize().value();
  model.call(<span class="keyword">this</span>, name, schema, collection, skipInit);
};
Mongoose.prototype.model = modelWithUnderScoreCollectionName;</code></pre>
<p>When this module is required for the first time, it requires <code>mongoose</code>, redefines <code>Mongoose.prototype.model</code> and delegates back to the original implementation of <code>model</code>. Now all instances of <code>Mongoose</code> will have this new behavior. Note that it does not modify <code>exports</code> so the value returned to <code>require</code> will be the default empty <code>exports</code> object.</p>
<p>As a side note, if you do choose to monkey patch existing code, use a chaining technique similar to my example above. Add your behavior then delegate back to the original implementation. While not foolproof, it is the safest way to patch third party code allowing you to take advantage of future updates to the library and minimizing conflict with other patches that may be applied.</p>
<h2 id="export-away-">Export Away!</h2>
<p>The Node module system provides a simple mechanism for encapsulating functionality and creating clear interfaces to your code. I hope the seven patterns here are a useful breakdown of different strategies available to you.</p>
<p>I haven&#39;t been exhaustive and there are certainly other options available but I have attempted to describe the most common and useful. Have I missed anything that should be included here?</p>
<p><em>Thanks to the incredibly prolific Node developer community for all the open source work from which I have done most of my learning. I encourage you to read the code of the libraries you are using and to find the great developers out there with clear, consistent and readable styles that can inspire your own. Special shout out to <a href="https://github.com/visionmedia">TJ Holowaychuk</a> whose work on Express.js, Connect and Should.js are referenced above.</em></p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/export-this/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/export-this/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Sun, 12 Jan 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cultivate Inaugural Meetup]]></title>
            <description><![CDATA[<p>The first <a href="http://www.meetup.com/cultivate">Cultivate meetup</a> was a huge success.</p>
<blockquote>
&quot;great first event for a meetup with a compelling mix of javascript code and social impact&quot;
</blockquote>

<blockquote>
&quot;Great meetup! Lots of interesting people and talks. Looking forward to future ones.&quot;
</blockquote>

<blockquote>
&quot;This was a great way to kickoff the Cultivate meetups; I left informed, enthused, (oh yeah, and nourished) and committed to return.&quot;
</blockquote>


<!-- more -->

<p>Over 80 members of the developer community came together on a chilly San Francisco night, under a common purpose: to use technology for the betterment of humanity and the planet.</p>
<p>As Good Eggs CTO Alon Salant said in an opening statement, &quot;We are building tools that affect real people in the real world. It&#39;s about affecting real change in someone&#39;s work to enhance their life.&quot;</p>
<p>The event kicked off with with a delicious bang: <a href="http://www.goodeggs.com/loveandhummus">Love &amp; Hummus</a> delivered an exceptional dining experience. Hearty falafel wraps, homemade tahini sauce, spicy hummus, sultry baklava, and mint-garnish lemonade.</p>
<p>If your mouth isn&#39;t watering yet, wait till you sink your teeth into the presentations.</p>
<h2 id="hanging-up-on-callbacks-more-than-flow-control-w-ecmascript-6-generators">Hanging up on Callbacks - [More than] Flow Control w/ECMAScript 6 Generators</h2>
<p><a href="http://www.carbonfive.com/employee/erin-swenson-healey">Erin Swanson-Healey</a> from Carbon Five gave a thorough walk-through into dealing with asynchronous callbacks in Javascript. With charisma and charm he  stated that we have new ways to deal with &quot;callback hell&quot;.</p>
<p>New Solution: <a href="http://www.2ality.com/2013/06/iterators-generators.html">ECMAScript 6</a> provides generators, which alleviates some of challenges that are associated with asynchronous callbacks.</p>
<p>Read Erin&#39;s <a href="http://blog.carbonfive.com/2013/12/01/hanging-up-on-callbacks-generators-in-ecmascript-6/">detailed blog post</a> on the topic, and check out his <a href="https://docs.google.com/a/goodeggs.com/presentation/d/1c23KjxQIoKKjho2wnjRXdJhmWd6X3g10B5ggC1DUE0M/edit#slide=id.p">slides</a> from the presentation here.</p>
<h2 id="whats-new-in-node-v0-12-">Whats new in Node v0.12.</h2>
<p>Next up was <a href="https://github.com/piscisaureus">Bert Belder</a> from StrongLoop. Bert is one of the principal authors of <a href="http://nikhilm.github.io/uvbook/introduction.html">libuv</a>, which is the library on which Node.js is built. Needless to say, we were stoked to see him present at the first Cultivate meetup!</p>
<p>Bert provided insight into:</p>
<ul>
<li>Round-robin clustering</li>
<li>Profiling</li>
<li>ExecSync</li>
<li>Multi-context</li>
</ul>
<p>Read more about <a href="http://strongloop.com/strongblog/whats-new-in-node-js-v0-12-cluster-round-robin-load-balancing/">cluster round-robin load balancing</a> from StrongLoop. For kicks, here is <a href="http://www.youtube.com/watch?v=QnO6Uut4Ao8">a video of Bert at LXJS 2013</a> - being a boss!</p>
<h2 id="mongodb-performance-fundamentals-for-web-apps">MongoDB Performance Fundamentals for Web Apps</h2>
<p><a href="http://www.goodeggs.com/about/team/sfbay/522103184f08c30300000028">Adam Hull</a> from Good Eggs was our final presenter, and he finished strong! We were lucky to have insights from Adam into performance, speed, and use of Mongo. The presentation ended with a pretty long Q&amp;A session that surfaced  answers to some questions that the collective developer community seemed to have been yearning to ask. Many of the remarks were confirmed with a head-nod from two developers from MongoLab in the audience. Head nods and &quot;ah ha&#39;s&quot; all around!</p>
<h2 id="lightning-talks">Lightning Talks</h2>
<p>Flashing through in 5-minute intervals, our speedy speakers were able to capture the audience with cool projects and insights, including:</p>
<ul>
<li>Jessica Lam - <a href="http://www.sgrbx.io/#/play/sHMVrO1jg8">real-time collaboration with sugarbox.io</a></li>
<li>Max Edmands - <a href="http://danieltao.com/lazy.js/">lazy.js</a> + <a href="https://github.com/demands/lazy-presentation">slides</a></li>
<li>Stewart Noyce - <a href="http://www.trunort.com/docs/Cultivate-Dec2013.pdf">lessons learned</a></li>
<li>Shubhra Kar - <a href="http://strongloop.com/strongloop-suite/strongops/">StrongOps Node performance monitoring dashboard</a></li>
<li>Alon Salant, - <a href="https://github.com/goodeggs/fibrous">fibrous library</a></li>
</ul>
<p>Overall, from our speakers there is one common thread: writing great apps with JavaScript is hard work. But with new tools, techniques and frameworks emerging, we can &quot;cultivate&quot; the developer community into a unified force, working together to blend technology and awareness to benefit humankind, the planet, and our future.</p>
<p>Join us for our next event, happening in early 2014!</p>
<p>Check back regularly <a href="http://www.meetup.com/cultivate"><a href="http://www.meetup.com/cultivate">http://www.meetup.com/cultivate</a></a> or email <a href="mailto:kevin@goodeggs.com">kevin@goodeggs.com</a> for suggestions or details.</p>
<p>Cheers!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/first-cultivate-meetup/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/first-cultivate-meetup/</guid>
            <dc:creator><![CDATA[Kevin Uland]]></dc:creator>
            <pubDate>Fri, 06 Dec 2013 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>