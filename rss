<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Bites from Good Eggs]]></title>
        <description><![CDATA[Bites from Good Eggs]]></description>
        <link>http://goodeggs.github.io/bites</link>
        <generator>NodeJS RSS Module</generator>
        <lastBuildDate>Tue, 15 Jul 2014 22:04:19 GMT</lastBuildDate>
        <atom:link href="http://goodeggs.github.io/bites/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Good Eggs]]></author>
        <pubDate>Tue, 15 Jul 2014 22:04:15 GMT</pubDate>
        <item>
            <title><![CDATA[A Conversation on Service Design with AirBnB, Good Eggs and Lyft]]></title>
            <description><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/1399154/service_design_panel/Service_Design_Graphic.png"/></p>
<p><a href="https://www.eventbrite.com/e/a-conversation-on-service-design-with-airbnb-good-eggs-and-lyft-tickets-12270402103?ref=ebtnebregn" target="_blank"><img src="https://www.eventbrite.com/custombutton?eid=12270402103" alt="Eventbrite - A Conversation on Service Design with AirBnB, Good Eggs and Lyft" /></a></p>
<p>Recent years have seen the rise of companies that serve well-established needs in peopleâ€™s lives with novel supply chains built on the resources and hard work of individuals rather than faceless corporations.</p>
<p>AirBnB provides travel accommodation by aggregating rooms, apartments and houses from individuals around the world. Good Eggs provides home groceries by aggregating food available directly from local farmers and foodmakers. Lyft provides daily transportation by connecting passengers to people with cars and spare time.</p>
<p>Travel accommodation, groceries and transportation are age-old needs. These companies are serving them in new ways with hybrid online/offline services that build on the ubiquity of internet technology to organize complex supply systems into simple-to-use services for their customers.</p>
<p>How do you design and deploy a brand across digital and physical experiences? How do you provide a consistent customer experience when much of the product experience is provided by a third party?</p>
<p>Join us for a conversation on the challenges, learnings and opportunities in designing for these kinds of services.</p>
<p>This event is a panel discussion with leaders in design from AirBnb, Good Eggs and Lyft.</p>
<p>Andrew Schapiro, <em>Design Lead, AirBnB</em><br/>
Robin Bigio, <em>Creative Director, Good Eggs</em><br/>
Frank Yoo, <em>Director of Product Design, Lyft</em><br/></p>
<p>Doors open at 6:30pm for great nourishing local snacks and drink from Good Eggs producers. Panel discussion starts at 7:30pm. Doors close at 9:30pm.</p>
<p><a href="https://www.eventbrite.com/e/a-conversation-on-service-design-with-airbnb-good-eggs-and-lyft-tickets-12270402103?ref=ebtnebregn" target="_blank"><img src="https://www.eventbrite.com/custombutton?eid=12270402103" alt="Eventbrite - A Conversation on Service Design with AirBnB, Good Eggs and Lyft" /></a></p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/service-design-panel/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/service-design-panel/            </guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 15 Jul 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Out of the frying pan]]></title>
            <description><![CDATA[<p>I am 32 and Good Eggs is the first company I have ever drawn a salary from. That wasn&#39;t exactly my intention. As a teenager I sketched out user interfaces in my room and dreamed of working at Pixar or <a href="https://web.archive.org/web/20000510065138/http://www.aliaswavefront.com/pages/home/index.html">Alias|Wavefront</a>. But I guess my most exciting opportunties were always hourly gigs, contracting jobs, grad school, and&mdash;most recently&mdash;founding a startup.</p>
<p>I like design and development because they are super creative, but I can&#39;t resist applying that creativity to management philosophies, corporate structures, and every other aspect of a business. That can make it hard to work for other people, who will inevitably have different ideas about how things should work.</p>
<p>Founding a startup is an alluring alternative. There&#39;s no technical debt to work around. There are no power structures you have to reckon with. You can call shots all day without worrying much about stepping on other peoples&#39; toes. You make compromises and code up ugly hacks, but they&#39;re <em>your</em> compromises and <em>your</em> ugly hacks.</p>
<p>It&#39;s addictive.</p>
<!-- more -->

<p>And if you can code, you can do a little consulting on the side and support your entrepreneurship habit more or less indefinitely, designing, coding, releasing, and experimenting to your heart&#39;s content.</p>
<p>But a company is more than code. And growing a group of people into a healthy, stable team is hard. In five years of trying on my own, I wasn&#39;t able to get there. All of that freedom allowed me to indulge my whims, but most of those whims turned out to be dead ends. And each time something fell apart, it took a little more wind out of my sails, both as a boss and as a person. Without anyone else to blame failures on, it got hard to believe in myself. And it got hard to put the work aside in the evening. Even though I was living the entrepreneurship dream, I started waking up with a belly full of dread.</p>
<p>So I reached out to Good Eggs and I got a &quot;real&quot; job. I get in by 10, and I leave by 6. Someone else decides what we eat for lunch. Someone else worries about our brand. Someone else worries about funding. Someone else worries about almost everything.</p>
<p>And I get to choose one or two things each week to really focus on. I&#39;m thinking about the diversity of our engineering team. I&#39;m thinking about doing more rapid prototyping. The team seems to think agile planning and continuous integration make it less neccessary, but I&#39;m not sure.</p>
<p>And I have to say, my mental health is much improved.</p>
<p>So for now, I&#39;m rather enjoying being a corporate drone. I still dream of radical departures from the status quo, even here at Good Eggs, where we do a lot of things differently. But these days I have much less desire to white-knuckle things into existence all by myself. It takes a village, and going forward I&#39;m going to try to stay a part of one.</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/frying-pan/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/frying-pan/            </guid>
            <dc:creator><![CDATA[Erik Pukinskis]]></dc:creator>
            <pubDate>Tue, 24 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Loading Scripts in the Critical Path: A Commerce Case Study]]></title>
            <description><![CDATA[<div class="series">
    <blockquote>This is the third article in a series of posts detailing the launch of our mobile site.</blockquote>
    <ol>
        <li><a href="/posts/good-eggs-goes-mobile">Good Eggs Goes Mobile</a></li>
        <li><a href="/posts/rivets-for-mobile">Rivets for Mobile Web</a></li>
        <li><a href="/posts/mobile-page-load">Planning Page Load Sequence</a></li>
        <li>HTTP Caching with Fastly</li>
        <li>Appropriate image sizes with imgix</li>
        <li>Integration testing over unit testing</li>
    </ol>
</div>

<p>Starting javascript on DOMContentLoaded, a pattern <a href="https://docs.angularjs.org/guide/bootstrap">baked into</a> or <a href="http://backbonejs.org/docs/todos.html#section-2">recommended by</a> many frameworks, defers some work that could be done earlier.  There aren&#39;t many examples of what can be done early, or how to wire it up.  Here&#39;s how we did it on the Good Eggs mobile site.
<!-- more --></p>
<h2>The Problem</h2>
<p>DOMContentLoaded is the start of life for most Javascript apps. It&#39;s a browser event signalling HTML has been fully parsed, and javascript can do <a href="http://blogs.msdn.com/b/ie/archive/2008/04/23/what-happened-to-operation-aborted.aspx">its worst</a>. Frameworks like Angular wait by default for this event before starting up. Usually, our app must start up before a visitor can accomplish whatever it is they came for.  We need to wire up event listeners.  We might even need to generate DOM elements by rendering templates. DOMContentLoaded quickly becomes a bottleneck in our <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp">critical rendering path</a>.  Phones, with their high-latency networks, exacerbate the problem.  An extra request for javascript can <a href="http://calendar.perfplanet.com/2011/carrier-networks-down-the-rabbit-hole/">add hundreds of milliseconds</a>.</p>
<p>While this bottleneck is fairly <a href="https://groups.google.com/forum/#!topic/closure-library-discuss/G-7Ltdavy0E">widely</a> <a href="https://alexsexton.com/blog/2010/01/dont-let-document-ready-slow-you-down/">known</a>, and most frameworks provide hooks for motivated developers to work around it, examples of starting up rich browser apps early are sparse. The Good Eggs engineering team, unconvinced that the heavy-backbone client-rendered approach of our desktop site could deliver a satisfying mobile experience, explored early start up.</p>
<h2>Our Approach</h2>
<div class="right">
<img src="/images/mobile-page-load/complete-page.jpg" alt="finished page">
</div>

<p>We&#39;ll step through loading a page selling blueberries as an example.  It&#39;s a good candidate for page load optimization because it&#39;s high traffic, and much of the value of the page doesn&#39;t depend on the interactive elements. Visitors land on this page to learn more about blueberries, things like &quot;Who grew them?&quot;, or &quot;Were they grown with pesticides?&quot;.  If they like what they find they may decide to buy, but we can build out the shopping widgets in a few hundred milliseconds while they learn.  We&#39;re not reducing the functionality of the page, or the total work it takes to set up, just moving some of it out of the critical path.</p>
<p>Hoping to add minimal complexity, we split the single event, DOMContentLoaded, into the three that benefitted us most:</p>
<ol>
<li><a href="#page-dom-loaded">Page DOM Loaded</a> - The interesting bits of HTML markup have loaded</li>
<li><a href="#page-js-loaded">Page JS Loaded</a> - Page specific, user-independent functionality has loaded</li>
<li><a href="#session-loaded">Session Loaded</a> - User-specific functionality and data has loaded</li>
</ol>
<div class="clear"></div>

<p>Loading the page on an iPhone 5 over a 3G network reveals this timeline:</p>
<p><img src="/images/mobile-page-load/timeline.jpg" alt="timeline"></p>
<p>Note that all three of these events occur on this page before <a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded">DOMContentLoaded</a>, the traditional launchpoint for single page js apps.  We&#39;re piggybacking on the browser&#39;s <a href="http://en.wikipedia.org/wiki/Incremental_rendering">incremental rendering</a> to wire up javascript before the DOM has fully finished loading.</p>
<pre class="highlighted"><code class="xml"><span class="tag">&lt;<span class="title">body</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- Page DOM ... --&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="comment">&lt;!-- 1. Page DOM Loaded --&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.example.com/page.{{hash}}.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="comment">&lt;!-- 2. Page JS Loaded --&gt;</span>
  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">startPage({<span class="comment">/* user-agnostic data */</span>})</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/session.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="comment">&lt;!-- 3. Session JS Loaded --&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="comment">&lt;!-- DOMContentLoaded --&gt;</span></code></pre>
<p>What can we do at these points? We&#39;ll explore each in detail below.</p>
<h2>Page DOM Loaded</h2>
<div class="right">
<img src="/images/mobile-page-load/page-dom-loaded.jpg" alt="page dom loaded">
</div>

<p>At this point, we&#39;ve loaded the markup that makes this page useful: the name and size of the blueberries a (cached) photo, a link to the shopper&#39;s basket and more.</p>
<p>The link to the basket and the link back to previous page are vanilla <code>&lt;a&gt;</code> tags, so the visitor can click them now before any javascript has loaded.  The hamburger menu icon won&#39;t actaully open the menu until the Page JS Loaded hook.  We could hide it until js has loaded but the flickering drew unwanted attention to that corner of the screen.</p>
<p>Note that that basket icon, while clickable, doesn&#39;t yet have the count of items in the basket.  That user-specific count comes in with the session.</p>
<p>By building the page with this stage of the lifecycle in mind, and pre-rendering on the server, we show information about the blueberries a full second before DOMContentLoaded.  If the user is just browsing (not shopping), this is the end of their critical path.</p>
<div class="clear"></div>

<h2>Page JS Loaded</h2>
<div class="right">
<img src="/images/mobile-page-load/page-js-loaded.jpg" alt="page js loaded">
</div>

<p>At this point, all the javascript powering interactions on this page has loaded and executed. The hamburger menu is now interactive, even though we still don&#39;t know how many items are in the user&#39;s basket.</p>
<p>Although we&#39;ve wired up event listeners for the &quot;Add to Basket&quot; button and quantity toggle (saving future script execution cycles), we keep the button hidden until we know if the user already has some of these blueberries in their basket so we can message appropriately.</p>
<div class="clear"></div>

<h2>Session Loaded</h2>
<div class="right">
<img src="/images/mobile-page-load/all-js-loaded.jpg" alt="finished page">
</div>

<p>At this point, we&#39;ve got user-specific data like the contents of their basket.  We can finally fill in that pesky item count in the top right, and show the &quot;Add to Basket&quot; button.</p>
<p>Why is this a big enough win to merit one of three lifecycle events? Caching.</p>
<p>Fastly can deliver our js bundle cached from its CDN in less time than it takes our server to send a little user-specific session information.  The screenshot below shows the case with the largest gap, where cachable scripts are already cached on the phone (note the 304 response) and only the session requires a network request.  This is the load sequence we expect for visitors browsing around the site, looking at all the wild vegetables availing only in the spring.</p>
<div class="clear"></div>

<p><img src="/images/mobile-page-load/network.jpg" alt="network"></p>
<p>For visitors who came to shop (rather than ogle), the &quot;Add to Basket&quot; button is in the critical path. They can&#39;t leave this page with the blueberries they came for until they click that button. We wait for session information to load before showing the button so shoppers can see how many, if any, blueberries they&#39;re already getting.</p>
<p>The session request is often the slowest for this user flow. We want to start it as early as possible, so we load it with a script tag. Firing off an XmlHttpRequest from the page js would be more convenient for developers (we&#39;d get a sucess callback to wire into), but doing so would delay starting the session request until after the page script had loaded and executed, potentially several hundred millis.  Instead we place a script tag just below the page js script tag in the body:</p>
<pre class="highlighted"><code class="xml"><span class="tag">&lt;<span class="title">body</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- Page DOM ... --&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.example.com/page.{{hash}}.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">startPage(<span class="comment">/*...*/</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/session.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span></code></pre>
<p>With this arrangement, modern browsers will download both scripts in parallel, and execute them in the order they appear in the DOM. The page script can listen for the session script to finish, fill in the user details, and complete our page.</p>
<h2>Next Steps</h2>
<p>There are still major oppourtunities to optimize our critical path.</p>
<p>Currently, to keep the build process simple, we inline all the styles for the whole site in the head of every page. This should be trimmed down to only the styles used on the page, and ideally on the styles for the above-the-fold content.</p>
<div class="right">
<img src="/images/mobile-page-load/incremental.jpg" alt="incremental rendering">
</div>

<p>We should optimize the order of the elements in the page DOM, so the most interesting are incrementally rendered first.  Currently the DOM order mirrors vertical order on the page, loading the navigation first.</p>
<p>For maximum performance, all the HTML and CSS to render the above-the-fold content should <a href="http://calendar.perfplanet.com/2012/make-your-mobile-pages-render-in-under-one-second/">come in the first 15kB</a> (compressed).</p>
<div class="clear"></div>

<p>We&#39;re hoping these three page load hooks give us the flexibility to tune mobile and responsive web perfomance moving forward.  If you&#39;ve tried a different approach to optimizing the DOMContentLoaded bottleneck, we&#39;d love to hear about it!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/mobile-page-load/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/mobile-page-load/            </guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Mon, 16 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comparing Node.js Promises, Try/Catch, Angular Zone.js and yes, Zone]]></title>
            <description><![CDATA[<blockquote>
<p>Reposted with permission by <a href="http://strongloop.com/">StrongLoop</a>. Originally appeared on <a href="http://strongloop.com/strongblog/comparing-node-js-promises-trycatch-zone-js-angular/">April 16, 2014</a>.</p>
</blockquote>
<h1>Handling errors in async flow</h1>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing async flow and escaping the <a href="http://callbackhell.com/">callback hell</a>.</p>
<h2>The problem</h2>
<p>Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.</p>
<!-- more -->

<p>Lets look at the following code:</p>
<pre class="highlighted"><code class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">updateDependencies</span><span class="params">(packageName, done)</span> {</span>
  findPackage(packageName, <span class="keyword">function</span>(err, content) {
    <span class="keyword">if</span> (err) {
      done(err);
    }
    <span class="keyword">else</span> {
      <span class="keyword">try</span> {
        <span class="package"><span class="keyword">package</span> = <span class="title">JSON</span>.<span class="title">parse</span>(<span class="title">content</span>);
      }
      <span class="title">catch</span> (<span class="title">e</span>) {</span>
        done(e);
      }

      findDependencies(<span class="keyword">package</span>, <span class="keyword">function</span>(err, dependencies)) {
        <span class="keyword">if</span> (err) {
          done(err);
        }
        <span class="keyword">else</span> {
          processDependencies(dependencies, <span class="keyword">function</span>(err) {
            <span class="keyword">if</span> (err) {
              done(err);
            }
            <span class="keyword">else</span> {
              done(<span class="literal">null</span>, dependencies);
            }
          });
        }
      });
    }
  });
}</code></pre>
<p>We are covering all possible failure cases here using combination of <code>try/catch</code> and callback error handling, but boy do we repeat ourselves over and over again. Lets try and rewrite this!</p>
<h2>Error handling using try/catch</h2>
<pre class="highlighted"><code class="vbscript"><span class="keyword">function</span> updateDependencies(packageName, done) {
  try {
    findPackage(packageName, <span class="keyword">function</span>(<span class="built_in">err</span>, content) {
      <span class="keyword">if</span> (<span class="built_in">err</span>) throw <span class="built_in">err</span>;

      findDependencies(JSON.parse(content), <span class="keyword">function</span>(<span class="built_in">err</span>, dependencies)) {
        <span class="keyword">if</span> (<span class="built_in">err</span>) throw <span class="built_in">err</span>;

        processDependencies(dependencies, <span class="keyword">function</span>(<span class="built_in">err</span>) {
          <span class="keyword">if</span> (<span class="built_in">err</span>) throw <span class="built_in">err</span>;

          done(<span class="literal">null</span>, dependencies);
        });
      });
    });
  } catch (e) {
    done(e);
  }
}</code></pre>
<p>Nice! That&#39;s much better. However, if we run this now, no errors will be caught. What&#39;s going on here?</p>
<p><code>try/catch</code> idiom works very well when you have fully synchronous code, but asynchronous operations render it useless.</p>
<p>The outer <code>try/catch</code> block will never catch anything because <code>findPackage</code> is asynchronous. The function will begin its course while the outer stack runs through and gets to the last line without any errors.</p>
<p>If an error occurs at some point in the future inside asynchronous <code>findPackage</code> - <strong>nothing will be caught</strong>.</p>
<p><img src="http://goodeggs.github.io/bites/images/posts/promises-trycatch-zones/catch-fail.gif"/></p>
<p>Not useful.</p>
<h2>Error handling using promises</h2>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing asynchronous flow and escaping the <a href="http://callbackhell.com/">callback hell</a> with promises. Lets put this promises to work here and rewrite this function.</p>
<p>For the sake of moving forward quicker lets assume we are using <a href="https://github.com/petkaantonov/bluebird">Bluebird</a> promises library and that all our APIs now return promises instead of taking callbacks:</p>
<pre class="highlighted"><code class="lua"><span class="function"><span class="keyword">function</span> <span class="title">updateDependencies</span><span class="params">(packageName)</span></span> {
  <span class="keyword">return</span> findPackage(packageName)
    .<span class="keyword">then</span>(JSON.parse)
    .<span class="keyword">then</span>(findDependencies)
    .<span class="keyword">then</span>(processDependencies)
    .<span class="keyword">then</span>(res.send)
    ;
}</code></pre>
<p>Oh wow, that is so much nicer! Right? Right!</p>
<p>But Alex, &quot;we&#39;ve lost our error handling&quot;, you might say. That&#39;s right, we don&#39;t need to do anything special here to propagate error because we return a promise and there&#39;s built in support for error flow. Lets see how error handling might look like with promises:</p>
<pre class="highlighted"><code class="avrasm">button<span class="preprocessor">.addEventListener</span>(<span class="string">"click"</span>, function() {
  updateDependencies(<span class="string">"packageName"</span>)
    <span class="preprocessor">.then</span>(function(dependencies) {
      output<span class="preprocessor">.innerHTML</span> = dependencies<span class="preprocessor">.join</span>(<span class="string">"\n"</span>)<span class="comment">;</span>
    })
    <span class="preprocessor">.catch</span>(function(err) {
      output<span class="preprocessor">.innerHTML</span> = <span class="string">"There was an error"</span><span class="comment">;</span>
    })<span class="comment">;</span>
})<span class="comment">;</span></code></pre>
<p>Very slick, I&#39;m a fan!</p>
<h2>Error using Zones</h2>
<p>Handling rejected promises works really well when we are in full control of the flow. But what happens if some third-party code throws an error during an asynchronous operation? Lets look at another example:</p>
<pre class="highlighted"><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">thirdPartyFunction</span><span class="params">()</span> {</span>
  <span class="function"><span class="keyword">function</span> <span class="title">fakeXHR</span><span class="params">()</span> {</span>
    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Invalid dependencies"</span>);
  }

  setTimeout(fakeXHR, <span class="number">100</span>);
}

<span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> {</span>
  button.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="title">onClick</span><span class="params">()</span> {</span>
    thirdPartyFunction();
  });
}

main();</code></pre>
<p>In this case, we wouldn&#39;t have a chance to catch and process the error. Generally, the only recourse here is using half baked <code>window.onerror</code> that doesn&#39;t give you any stack information at all. At least you can log something, right? Not that there&#39;s much to log:</p>
<pre class="highlighted"><code class="nginx"><span class="title">Uncaught</span> Error: Invalid dependencies
    fakeXHR</code></pre>
<p>Up until recently that was pretty much all we had. However, this january <a href="https://github.com/btford">Brian Ford</a> of the <a href="http://angularjs.org">angular.js</a> fame has released <a href="https://github.com/btford/zone.js/">Zone.js</a> which aims to help tackle this.</p>
<p>Basically, <a href="https://github.com/btford/zone.js/">Zone.js</a> <strong>overrides all asynchronous functions in the browser</strong> with custom implementations which allows it to keep track of the context. Dangerous? Yes! But as we say in Soviet Russia, &quot;he who doesn&#39;t risk never gets to drink champagne&quot; (or in English &quot;nothing ventured, nothing gained&quot;).</p>
<p>Anyways, lets look at how this works. Assuming you have included <code>zones.js</code> and <code>long-stack-trace-zone.js</code> as per the docs, we just change <code>main()</code> call to:</p>
<pre class="highlighted"><code class="avrasm">zone<span class="preprocessor">.fork</span>(Zone<span class="preprocessor">.longStackTraceZone</span>)<span class="preprocessor">.run</span>(main)<span class="comment">;</span></code></pre>
<p>Refresh, click the button, and now our stack looks like this:</p>
<pre class="highlighted"><code class="bash">Error: Invalid dependencies
    at fakeXHR (script.js:7:11)
    at Zone.run (zones.js:41:19)
    at zoneBoundFn (zones.js:27:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 106ms ago
Error
    at Function.getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at zone.(anonymous function) (zones.js:61:27)
    at marker (zones.js:66:25)
    at thirdPartyFunction (script.js:10:3)
    at HTMLButtonElement.onClick (script.js:15:5)
    at HTMLButtonElement.x.event.dispatch (jquery.js:5:10006)
    at HTMLButtonElement.y.handle (jquery.js:5:6789)
    at Zone.run (zones.js:41:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 1064ms ago
Error
    at getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Function.Zone.getStacktrace (long-stack-trace-zone.js:37:15)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at HTMLButtonElement.obj.addEventListener (zones.js:132:37)
    at Object.x.event.add (jquery.js:5:7262)
    at HTMLButtonElement.&lt;anonymous&gt; (jquery.js:5:14336)
    at Function.x.extend.each (jquery.js:4:4575)
    at x.fn.x.each (jquery.js:4:1626)
    at x.fn.extend.on (jquery.js:5:14312)</code></pre>
<p>What the what?? Cool! We can now see that the relevant code path started in our <code>onClick</code> method and went into <code>thirdPartyFunction</code>.</p>
<p>The cool part is, since <a href="https://github.com/btford/zone.js/">Zone.js</a> overrides browser methods, it doesn&#39;t matter what libraries you use. It just works.</p>
<h2>Another async flow control project called Zones?</h2>
<p>Yep, StrongLoopâ€™s <a href="https://github.com/piscisaureus">Bert Belder</a> has been working on a similar idea called â€œ<a href="https://www.npmjs.org/package/zone">Zone</a>â€œ for a few months now. (Not to be confused with the Angular <a href="https://github.com/btford/zone.js/">Zone.js</a> project we&#39;ve just been discussing, which shares the same name and some technical characteristics. Yeah, itâ€™s a little confusing, but we are actively working with <a href="https://github.com/btford">Brian Ford</a> on how to potentially bring together these two projects for the mutual benefit of the JavaScript and Node communities. Stay tuned!)</p>
<h2>Why a Node-specific Zones project?</h2>
<p>Currently, there are a couple of problems that make it really hard to deal with asynchronous control flow in Node that Zones looks to address. Specifically:</p>
<ul>
<li>Stack traces are useless when an asynchronous function fails.</li>
<li>Asynchronous functions are hard to compose into more high-level APIs. Imagine implementing a simple asynchronous API like bar(arg1, arg2, cb) where cb is the error-first callback that the user of the API specifies. To implement this correctly you must take care:<ul>
<li>to always call the callback</li>
<li>donâ€™t call the callback more than once</li>
<li>donâ€™t synchronously throw and also call the callback</li>
<li>donâ€™t call the callback synchronously</li>
</ul>
</li>
<li>It is difficult to handle errors that are raised asynchronously. Typically node will crash. If the uses chooses to ignore the error, resources may leak. Zones should make it easy to handle errors and to avoid resource leaks.</li>
<li>Sometimes there is a need to associate user data to an asynchronous flow. There is currently no way to do this.</li>
</ul>
<p>Want to learn more about Zones? Stay tuned for more information in the coming weeks. Follow us on <a href="https://twitter.com/StrongLoop">Twitter</a> or subscribe to our <a href="http://strongloop.com/newsletter-registration/">newsletter</a> to make sure you donâ€™t miss the announcements.</p>
<h2>What&#39;s next?</h2>
<ul>
<li>Watch <a href="http://www.youtube.com/watch?v=3IqtmUscE_U">Brian&#39;s presentation</a> from ngconf 2014, it&#39;s pretty cool!</li>
<li>Add <a href="https://github.com/btford/zone.js/">Zone.js</a> to your application.</li>
<li>Profit!</li>
</ul>
<p><img src="http://goodeggs.github.io/bites/images/posts/promises-trycatch-zones/party.gif"/></p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/promises-trycatch-zones/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/promises-trycatch-zones/            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 09 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[You Forgot About bfcache!]]></title>
            <description><![CDATA[<style>.entry-content img { display: block; margin: 0 auto }</style>

<p>So there we were, putting the polishing touches on our mobile app.  There were a few big bugs that we wanted to clean up before we launched.  One seemed a bit edge-case-y, but still not good: when iPhone users clicked on products and then subsequently clicked back to the product listings, they saw our animated spinner stuck like this:</p>
<p><img src="/images/spin-spin.gif" alt="Waiting for user to reload"></p>
<!-- more -->

<p>It seemed straightforward enough, but it required some researching until we ran across this <a href="https://stackoverflow.com/questions/8788802/prevent-safari-loading-from-cache-when-back-button-is-clicked">stack overflow post</a>.</p>
<p>bfcache, eh?</p>
<p><img src="/images/cosby-huh.gif" alt="bfcache?"></p>
<p>From the Stack Overflow answer:</p>
<blockquote>
<p>&quot;[bfcache] is supposed to save complete state of page when user navigates away.
When user navigates back with back button page can be loaded from cache very quickly.
This is different from normal cache which only caches HTML code.&quot;</p>
</blockquote>
<p>It turns out that all browsers support bfcache, but Mobile Safari sometimes needed a little extra help.  That led us to try something along the lines of this:</p>
<pre class="highlighted"><code class="coffeescript">    window.onpageshow, (event) =&gt;
      <span class="keyword">if</span> event.persisted
        overlay.hide() <span class="comment"># Hide the spinner overlay</span></code></pre>
<p>Seemed like it should work, but it didn&#39;t!  After a lot more research and even more a lot more trial-and-error, we noticed we had multiple window.onpageshow assignments.  jQuery to the rescue (yet again)!</p>
<pre class="highlighted"><code class="coffeescript">    $(window).<span class="literal">on</span> <span class="string">'pageshow'</span>, (event) =&gt;
      <span class="keyword">if</span> event.persisted
        overlay.hide()</code></pre>
<p>With our fix in place we were ready to head home and have a beer, right?  Nope!  What if we needed to sneak past bfcache again?  Well how about we move the code to our main Page class and define an overwritable function called onBrowserBack?</p>
<pre class="highlighted"><code class="coffeescript">    $(window).<span class="literal">on</span> <span class="string">'pageshow'</span>, (event) =&gt;
      <span class="keyword">if</span> event.persisted
        overlay.hide()
        <span class="property">@onBrowserBack</span>?()</code></pre>
<p><img src="/images/BOOM.gif" alt="BOOM!"></p>
<p>This turned out to be really useful because the counter of items added to the basket in our navigation menu wasn&#39;t updating either.  We just threw a bit of code into the onBrowserBack function for our product listing page which made a request to get new session data and we&#39;d fixed two bugs with one event.</p>
<p>If you&#39;ve read this far and you&#39;re interested in more on the ins-and-outs of how browsers deal with caching history you&#39;ll probably find <a href="http://madhatted.com/2013/6/16/you-do-not-understand-browser-history">You do not understand browser history</a> interesting and useful!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/you-forgot-about-bfcache/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/you-forgot-about-bfcache/            </guid>
            <dc:creator><![CDATA[Brian Underwood]]></dc:creator>
            <pubDate>Wed, 28 May 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[What Are Your Hiring Criteria?]]></title>
            <description><![CDATA[<p>What are the criteria you use when hiring for your team? Have you written them down?</p>
<p>Lots of people think they have clear criteria for hiring but have never taken the time to write them down. Written criteria are an important component of an effective hiring process. In this post I&#39;ll share some guidance on establishing clear criteria, how to use them to design an efficient interview process, and the role they play in developing diversity on your team.</p>
<h2>Defining Your Hiring Criteria</h2>
<p>There are a number strategies you can use to get to your criteria. If you haven&#39;t already you could probably just write them down right now and have something to work with. That&#39;s a fine start. Sharing them with your team for review and revision is likely to make them even better.</p>
<p>Another approach is to actively engage your team in developing your criteria. You can get pretty far with this short exercise.</p>
<ul>
<li>Gather your team in a quiet room</li>
<li>Hand out stickies and sharpies</li>
<li>Give the team 3 minutes to write down the desirable attributes of members of your team, one attribute per sticky</li>
<li>Have each person put their stickies on a wall and form clusters of related items</li>
<li>Give every member of the team 4 votes to <a href="http://martinfowler.com/bliki/DotVoting.html">dot vote</a> their top attributes</li>
</ul>
<p>Do the items with the most votes look like your criteria? You hopefully have a mix of different criteria that cover technical skills, working style, personality traits, domain expertise and more.</p>
<!-- more -->

<p>We did this exercise last year at Good Eggs as part of an effort to improve the hiring process on our engineering team. It had the additional benefit of helping the team better understand the characteristics that we feel define us and our work. It was also the raw input for the development of our <a href="http://bites.goodeggs.com/posts/manifesto/">Software Development Manifesto</a>.</p>
<p>Examples of criteria that came out of that process and that we use today are:</p>
<ul>
<li>Is aligned with our mission to grow and sustain local food systems worldwide</li>
<li>Has strong opinions, weakly held</li>
<li>Has full stack web development experience</li>
</ul>
<p>Even with this short list of criteria you&#39;ll notice that there are differences. The first two can be more easily answered with yes/no while the third really needs to be evaluated on a scale. For us, the first two are also must-haves, while the third is desired but not required.</p>
<p>This is fine. Just be clear on which criteria are must-haves versus which ones you have as criteria because insight into how well a candidate meets that criteria will be important in your hiring decision.</p>
<h2>Disqualifying Criteria</h2>
<p>If a candidate meets any of your disqualifying criteria it means that you will definitely not hire them. Many of your must-have criteria can simply be inverted to create a disqualifier. The useful disqualifiers are the ones that can be easily evaluated and therefore used early in your process. Be sure to call them out in your written criteria and use them in the initial screening of candidates.</p>
<p>At Good Eggs, we consider it a disqualifier if a candidate does not value our mission to grow and sustain local food systems. So we are sure to get an understanding of a candidate&#39;s relation to food and their desire to work on a social cause. If you&#39;re solely interested in Good Eggs because you&#39;re stoked to work with Node.js, it&#39;s not going to work out.</p>
<h2>Hiring Criteria and Your Interview Process</h2>
<p>The goal of your interview process should be to determine how well a candidate meets your criteria and therefore if you want to invite them to join your team. By the time your interviews are done you should be able to discuss the candidate in relation to each of the criteria.</p>
<p>Before a candidate interviews with our team at Good Eggs, the people who are going to participate in the interview have a short meeting to review our criteria, identify those criteria for which we already have insight and those for which we specifically want to get more. Our existing insights may come from work history, phone conversations, Github...</p>
<p>We&#39;ve designed our interview sessions to give us coverage across all of our criteria. Different interviewers are responsible for getting insight into different criteria. When we pass the candidate from one interview to the next, we tell the next interviewer(s) if we have outstanding questions that we would like them to try to answer.</p>
<p>When we gather to make a decision on how to move forward we use our criteria to have a focused conversation about the strengths and weaknesses of the candidate. Do they meet the criteria for which we require a &quot;yes&quot; and for the others how well did they perform? If we find that we disagree on our evaluation or have failed to gain insight into one or more of our criteria then we may design next steps to get more insight into those specifics.</p>
<p>Occasionally the situation comes up when a candidate appears to meet our criteria yet we are not inclined to make a decision to hire. This is a clear indication that we are using implicit criteria in addition to our explicit written criteria. If you find yourself in this situation, take the time to articulate the reason why you do not want to hire and modify your criteria to include it.</p>
<h2>Hiring Criteria and Diversity</h2>
<p>The first important step in supporting diversity in hiring is to be sure that you are using explicit rather than implicit criteria. Implicit criteria are too easily subject to personal biases and inconsistent application across candidates. Explicit written criteria can be used consistently for all candidates and are easier to evaluate and revise for inclusiveness.</p>
<p>In February I attended an orientation for <a href="http://code2040.org/">Code 2040</a> hosted at the offices of Andreesen Horowitz. Code 2040 is an organization that creates internship opportunities in Silicon Valley for black and latino engineering students from across the country. We are thrilled to have a Code 2040 alum, EstefanÃ­a Ortiz, joining us an intern for summer 2014.</p>
<p>Ben Horowitz is a supporter and board member of Code 2040. When asked for his thoughts on general strategies for improving diversity on teams he talked about hiring criteria in a way that helped to expand my thinking and appreciate the value of the criteria we already had in place. He said that a common approach to increasing diversity on a team is to effectively lower the standards for hiring. Hiring managers think that in order to make positions available to more people they need to lower their bar. This approach is a poor one because neither a new hire nor the existing team is happy knowing that the bar has been lowered.</p>
<p>A much better approach is to change your criteria so as to be more inclusive without lowering your high standards.</p>
<p>Our requirement that candidates are aligned with our mission to grow and sustain local food systems is interesting to evaluate in this light. In many communities in this country basic groceries are hard enough to find, let alone the amazing local and organic produce we enjoy in California. Some immigrants come from communities that have existing strong food cultures so have less experience with the ills of industrial food in this country.</p>
<p>We used to require that team members demonstrate passion for fixing food in this country and a personal commitment to our mission. We&#39;ve been able to grow an amazing team with that focus but we strive to be more inclusive as we continue to grow. We&#39;ve realized that what really matters is that members of our team want their work to be toward making positive change in the world and see aligning themselves with Good Eggs as a way to meet that need. It&#39;s a subtle change but opens the door to many more amazing people who want to help us achieve our mission.</p>
<h2>How To Apply This To Your Own Team</h2>
<p>It&#39;s pretty easy to put these suggestions into practice.</p>
<ol>
<li>Write down your criteria</li>
<li>Revise with feedback from your team</li>
<li>Ensure that you get insight into your criteria through your interview process</li>
<li>Evaluate your candidates against your criteria when making hiring decisions</li>
<li>Revise your criteria when you find yourself using implicit criteria in your decisions</li>
<li>Periodically reevaluate your criteria for inclusiveness and hidden biases</li>
</ol>
<p>If you have additional suggestions on how to create and use effective hiring criteria I&#39;d love to hear from you in the comments.</p>
<blockquote>
<p>This post also appeared on <a href="http://www.sequoiacap.com/grove/posts/eaqj/what-are-your-hiring-criteria">Sequoia Grove</a> April 30, 2014.</p>
</blockquote>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/written-hiring-criteria/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/written-hiring-criteria/            </guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 29 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Rivets for Mobile Web]]></title>
            <description><![CDATA[<div class="series">
    <blockquote>This is the second article in a series of posts detailing the launch of our mobile site.</blockquote>
    <ol>
        <li><a href="/posts/good-eggs-goes-mobile">Good Eggs Goes Mobile</a></li>
        <li><a href="/posts/rivets-for-mobile">Rivets for Mobile Web</a></li>
        <li><a href="/posts/mobile-page-load">Planning Page Load Sequence</a></li>
        <li>HTTP Caching with Fastly</li>
        <li>Appropriate image sizes with imgix</li>
        <li>Integration testing over unit testing</li>
    </ol>
</div>

<p>Before coding a phone-sized farmer&#39;s market, the Good Eggs team built
production sites using tools at both extremes of the javascript application
ecosystem:  Backbone for our desktop experience and Angular for our internal tools.
But neither felt quite right for our mobile site.</p>
<p>We had two priorities for our mobile toolchain: <!-- more -->the page had to load
fast, and we had to code ... efficiently. <a href="http://www.rivetsjs.com/">Rivets</a> with its
declarative data-binding and simple hooks for server-side pre-rendering fit the task well.</p>
<h2>Backbone, No</h2>
<p>Backbone had few constraints.  You could imagine a fast page load sequence using it.  For us, it really lost points for developer friendliness.  A seemingly small but pervasive example: <code>Model.get()</code>.  It interrupts my javascript flow.  Do I need <code>.get</code> or just <code>.</code> to traverse this object graph?  Combining <code>get</code> with nested models and objects is especially convoluted.  My mind frequnetly cycled though the permutations: <code>model.get(&#39;address.zip&#39;)</code>, <code>model.get(&#39;address&#39;).get(&#39;zip&#39;)</code>, or <code>model.get(&#39;address&#39;).zip</code> ?  Luckily, recent Android and iOS devices already totalled 85% of our mobile traffic, so we were comfortable relying on ES5&#39;s <code>Object.defineProperty</code> to unlock Rivets native change detection syntax.</p>
<h2>Angular, Not Yet</h2>
<p>Angular suffered on page load performance.  Following library conventions, we&#39;d have to wait for 100+k of javascript to load, parse, and execute before we could show much of value to our visitor.  Inspired by Bryan McQuade&#39;s <a href="http://calendar.perfplanet.com/2012/make-your-mobile-pages-render-in-under-one-second/">perscription for a fast mobile page</a>, we decided this was unacceptable.  Angular&#39;s declarative binding did speed up code slinging and generate good vibes on projects that used it, so we were glad to discover Rivets&#39;  similar bindings with fewer strong opinions and a much lighter pageweight.</p>
<h2>Rivets, Use it Now</h2>
<p><a href="http://www.rivetsjs.com/">Rivets</a> is very limited in scope.  With it, you get binding and a little bit of formatting.  That&#39;s it.  We had to decide many more architectural conventions like when to bind and what to bind to (stay tuned for a forthcoming post detailing the page load sequence we settled on).  Two Rivets details emerged worth sharing: binding and nesting contexts.</p>
<p><img src="/images/mobile-screenshot.jpg" alt="Mobile screenshot"></p>
<p>In browsers supporting <code>Object.defineProperty</code>, Rivets will bind to any object.  Rivets docs refer to this object as the context.  We bound simple views directly to domain models.  For more complex views, we wrapped up interaction logic in objects reminiscent of Angular scopes.  These objects exposed methods to be called from bindings or tests.  Consider your shopping basket.  We sum the number of treats you&#39;re getting into a total displayed in the top right corner.  This count is maintained by a binding directly to a basket model.  When you click a plus button, a rivets binding invokes a method on the bound basket model. The same model bound to the view.  These two conventions let us wire up simple bindings with minimal boilerplate (no deciding when to render and re-render) and gave us an expected place to add and test more complex wiring.</p>
<p>The behavior of the top 50 or so pixels of the mobile site, call it the top bar, changes a lot.  That&#39;s valuable space on a small screen.  We broke the behaviors into several contexts to prevent the complexity from exploding our brains.  Binding multiple contexts to the same DOM tree with Rivets isn&#39;t totally straightforward, but it&#39;s very doable.  Out of the box, when you bind a context to an element, all children elements are bound to the same context. For us, this meant that the basket bindings got the top nav context instead of the basket model. Boom.  Broken.  Luckily Rivets lets you declare custom prefixes for your bindings.  We adopted a convention of prefixing each binding with the name of the context.  This let us bind <code>rv-top-nav-*</code> as soon as the page loaded, and bind <code>rv-basket-*</code> on nested elements later.</p>
<pre class="highlighted"><code class="coffeescript">div <span class="string">'rv-top-nav-show'</span>: <span class="string">'state | is full'</span>, -&gt;
  a <span class="string">'.logo'</span>, href: <span class="string">"/"</span>, -&gt;
      i <span class="string">'.icon.icon-logo'</span>, alt: <span class="string">'good eggs'</span>

  <span class="comment"># other top nav code ...</span>

  a <span class="string">'#basket.icon'</span>, href: <span class="string">"/basket"</span>, -&gt;
    i <span class="string">'.icon.icon-basket'</span>
    div <span class="string">'.items-count'</span>, <span class="string">'rv-basket-text'</span>: <span class="string">'itemsCount'</span>, <span class="string">'0'</span></code></pre>
<p>And then binding to our objects:</p>
<pre class="highlighted"><code class="coffeescript">module.<span class="function"><span class="title">exports</span></span> = -&gt;
  state: <span class="string">'full'</span>

  bind: -&gt;
    <span class="property">@el</span> = $(<span class="string">'.top-nav'</span>)

    rivets.bind <span class="property">@el</span>.toArray(), @,
      config:
        prefix: <span class="string">'rv-top-nav'</span>

    @

  bindToSession: (session) -&gt;
    <span class="property">@user</span> = session.user

    rivets.bind $(<span class="string">'#basket'</span>).toArray(), session.basket
      config:
        prefix: <span class="string">'rv-basket'</span>

    @</code></pre>
<p>Rivets declarative binding rocks for mobile web.  Try it out!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/rivets-for-mobile/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/rivets-for-mobile/            </guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Fri, 25 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Good Eggs Goes Mobile]]></title>
            <description><![CDATA[<div class="series">
    <blockquote>This is the first article in a series of posts detailing the launch of our mobile site.</blockquote>
    <ol>
        <li><a href="/posts/good-eggs-goes-mobile">Good Eggs Goes Mobile</a></li>
        <li><a href="/posts/rivets-for-mobile">Rivets for Mobile Web</a></li>
        <li><a href="/posts/mobile-page-load">Planning Page Load Sequence</a></li>
        <li>HTTP Caching with Fastly</li>
        <li>Appropriate image sizes with imgix</li>
        <li>Integration testing over unit testing</li>
    </ol>
</div>


<p>In the past 6 months, 25% of our traffic came from mobile devices, and those users faced a
daunting, near impossible shopping experience. In response, we launched a new
mobile version of <a href="http://goodeggs.com">goodeggs.com</a> two weeks ago with an
eye to simplify our major use case of filling your basket with products and
checking out. To create the mobile experience we considered three options:</p>
<ol>
<li>native mobile apps for iOS and Android</li>
<li>a responsive re-design of our existing website</li>
<li>building a mobile website from scratch</li>
</ol>
<!-- more -->

<h3>Native Someday</h3>
<p>While native mobile apps offer the potential for a superior user experience, our
first priority was handling the 25% of traffic already coming to our website.
Even with a nagging banner to download a native app, we&#39;d still have users
visiting our site on mobile devices. Additionally, we wanted to be able to
iterate quickly on the mobile platform and not be at the whim of the App Store&#39;s
approval process nor users&#39; responsibilities to install updates.</p>
<h3>Not Responsive Enough</h3>
<p>We also ruled out a responsive design pretty quickly. Our requirements for the
mobile application were to deliver a fast and simple experience. With such small
screen real estate on the phone, we knew we wanted to completely rethink the
layouts and content of our pages; a little too complex for fluid grids, and
media queries.</p>
<h3>Fresh Start</h3>
<p>Instead of continuing with our &quot;desktop&quot; stack built on
<a href="http://backbonejs.org/">Backbone</a>, we decided to take the opportunity for a fresh start.
With <a href="http://backbonejs.org/">Backbone</a>,
<a href="http://angularjs.org/">Angular</a>, <a href="http://emberjs.com/">Ember</a>, and other client
side frameworks, the user has to wait for the JavaScript to be loaded before any
client side rendering can begin, and we really wanted to prioritize initial page load.
We decided for our use cases, we could deliver a better experience by generating HTML on the server side so the phone
can begin rendering as soon as it starts receiving data from the initial request.</p>
<p>In the coming weeks, we&#39;ll be taking a deeper dive on some of the major
architectural decisions we made. Check back to learn about:</p>
<ul>
<li><p><strong>Rivets instead of Backbone/Angular/etc.</strong>
<a href="http://www.rivetsjs.com/">Rivets</a>, turned out to be just the right size for this project.  Its simple hooks for server-side pre-rendering, Angular inspired declarative binding, and small pageweight helped us get commits in fast and deliver tiny snacks to pocket-sized screens at speeds approaching our sub-second dreams.</p>
</li>
<li><p><strong>Planning page load sequence for faster initial page load</strong>
To get food on the screen quickly, we considered each step of the page load cycle: the first packet through user-specific javascript execution.</p>
</li>
<li><p><strong>HTTP Caching with <a href="https://www.fastly.com/">Fastly</a></strong>
Especially with server-side generated HTML, we knew HTTP caching would be our best bet for fast page loads. By normalizing our request headers, separating session information into separate AJAX calls, and setting appropriate cache headers, we achieved significant performance gains.</p>
</li>
<li><p><strong>Appropriate image sizes with <a href="http://www.imgix.com/">imgix</a></strong>
Folks really seem to <em>get</em> GoodEggs when they can see the food.  The photos are very very very important.  Modern iPhones have dense displays that demand high quality photos, but their networks are often strained.  We&#39;ve found a balance.</p>
</li>
<li><p><strong>Integration testing over unit testing</strong>
We skipped adding unit tests on browser and express controller code in all but the most critical cases, minimizing the overhead of making sweeping changes, which we made frequently while figuring out our new Rivets-based architecture. Browser based integration tests assured us that shoppers could still experience their journeys after our changes. They were a huge help and a small burden.</p>
</li>
</ul>
<p>And in the meanwhile, go take a look at <a href="http://goodeggs.com">goodeggs.com</a> in a mobile device and let us know what you think!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/good-eggs-goes-mobile/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/good-eggs-goes-mobile/            </guid>
            <dc:creator><![CDATA[Michael Kebbekus and Adam Hull]]></dc:creator>
            <pubDate>Fri, 11 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JS Hack for Good with JSFest]]></title>
            <description><![CDATA[<p>We&#39;re partnering with <a href="http://jsfest.com">JSFest</a> to host a JavaScript hack night for social good on Sunday evening March 9. JSFest runs March 6-12 in San Francisco.</p>
<p>Let&#39;s spend a few hours hacking together to make the world a better place. Bring your project or your desire to help others with theirs. Open source and socially-minded projects are all welcome. If you want to give a short presentation or run a mini workshop we have the facilities and welcome your initiative.</p>
<p>We&#39;ll kick off with project intros and requests for help to connect hackers with the projects they are interested in.</p>
<p>Start at 6pm with some great local food and drink to help us all connect, kick off at 6:30pm and doors close at 10:00pm.
A few folks from Good Eggs with expertise in Node, Backbone, Angular, MongoDB and more will be around to help and with some projects of their own.</p>
<p><a href="http://www.meetup.com/cultivate/events/167399892/">Reserve your spot</a> and we&#39;ll see you Sunday!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/js-hack-for-good/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/js-hack-for-good/            </guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 04 Mar 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Good Eggs Software Development Manifesto]]></title>
            <description><![CDATA[<p>At Good Eggs we are on a mission <em>to grow and sustain local food systems worldwide</em>. Everyone in the company is here because they believe in this mission and our vision for a better future.</p>
<p>So how does this apply to our work as an engineering team and what other core values keep us aligned, excited and productive? We took some time to articulate our values as a team which I am presenting here as a first draft of our Software Development Manifesto.</p>
<!-- more -->

<h2>We believe</h2>
<p><em>We believe</em> that technology can be used to make the world a better place.</p>
<p><em>We believe</em> in building beautiful things that improve peopleâ€™s lives.</p>
<p><em>We believe</em> that when given an opportunity to create positive change, you act on it.</p>
<p><em>We believe</em> in the value of exploration and innovation.</p>
<p><em>We believe</em> that reshaping our food system is a direct way to care for people and our planet.</p>
<h2>What we do</h2>
<p><strong>We create change</strong><br/>
Weâ€™re building software to power a new, alternative food system: One that supports high-integrity farmers and foodmakers and enables them to compete with the industrial food complex. A system that helps all families eat well and enables them to support the future they want to see. A system where the folks doing things right are the ones who succeed.</p>
<p><strong>We make real things with real impact</strong><br/>
Yesterday we were writing the code for a new application now being tested by local farmers. Tomorrow weâ€™ll be collecting feedback and improving on it. Weâ€™re constantly delivering new experiences and tools into the hands of our customers and producers, all of which are designed to make their lives easier.</p>
<p><strong>Weâ€™re tackling hard problems</strong><br/>
Working with food is complex with lots of variables to solve for, from weather patterns to traffic patterns. Weâ€™re innovating across the worlds of online retail, inventory management and delivery logistics to name a few, and are constantly working to make our systems and processes work even better.</p>
<h2>How we do it</h2>
<p><strong>We use radical tools for radical change</strong><br/>
We&#39;re members of and contributors to an open source community that is defining new ways to build applications with Node.js and full stack JavaScript. We&#39;re adventurous and use technologies that inspire us to innovate and solve problems in new ways.</p>
<p><strong>We stay nimble</strong><br/>
We work quickly because the faster we can get a solution in someoneâ€™s hands, the faster we can learn how to make it better. We test and automate with rigor so that mundane tasks don&#39;t slow us down.</p>
<p><strong>We continuously improve</strong><br/>
There is no best way, only better and better ways. We&#39;re building systems that handle complexity in the real world by creating visibility at every stage of the process. Weâ€™re empowering the people involved to solve problems when and where they happen.</p>
<p>Itâ€™s the technology at the heart of Good Eggs that will enable us to scale and make real change. Weâ€™re using technology to think big in service of the small. Weâ€™re building the systems that help local farmers sell enough to actually make a living. Weâ€™re creating efficient logistics that mean parents can trade a trip to the grocery store for time to read the kids another bedtime story. Weâ€™re fueling a food system that will feed everyone well, and weâ€™re psyched to be doing it. Because the better we work, the better the world we all live in.</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/manifesto/</link>
            <guid isPermaLink="true">
                http://goodeggs.github.io/bites/posts/manifesto/            </guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 25 Feb 2014 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>