<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Bites from Good Eggs]]></title>
        <description><![CDATA[Bites from Good Eggs]]></description>
        <link>http://goodeggs.github.io/bites</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 25 Apr 2014 17:06:56 GMT</lastBuildDate>
        <atom:link href="http://goodeggs.github.io/bites/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Good Eggs]]></author>
        <pubDate>Fri, 25 Apr 2014 17:06:52 GMT</pubDate>
        <item>
            <title><![CDATA[Good Eggs Goes Mobile]]></title>
            <description><![CDATA[<p>In the past 6 months, 25% of our traffic came from mobile devices, and those users faced a
daunting, near impossible shopping experience. In response, we launched a new
mobile version of <a href="http://goodeggs.com">goodeggs.com</a> two weeks ago with an
eye to simplify our major use case of filling your basket with products and
checking out. To create the mobile experience we considered three options:</p>
<ol>
<li>native mobile apps for iOS and Android</li>
<li>a responsive re-design of our existing website</li>
<li>building a mobile website from scratch</li>
</ol>
<h3 id="native-someday">Native Someday</h3>
<p>While native mobile apps offer the potential for a superior user experience, our
first priority was handling the 25% of traffic already coming to our website.
Even with a nagging banner to download a native app, we&#39;d still have users
visiting our site on mobile devices. Additionally, we wanted to be able to
iterate quickly on the mobile platform and not be at the whim of the App Store&#39;s
approval process nor users&#39; responsibilities to install updates.</p>
<h3 id="not-responsive-enough">Not Responsive Enough</h3>
<p>We also ruled out a responsive design pretty quickly. Our requirements for the
mobile application were to deliver a fast and simple experience. With such small
screen real estate on the phone, we knew we wanted to completely rethink the
layouts and content of our pages; a little too complex for fluid grids, and
media queries.</p>
<h3 id="fresh-start">Fresh Start</h3>
<p>Instead of continuing with our &quot;desktop&quot; stack built on
<a href="http://backbonejs.org/">Backbone</a>, we decided to take the opportunity for a fresh start. 
With <a href="http://backbonejs.org/">Backbone</a>,
<a href="http://angularjs.org/">Angular</a>, <a href="http://emberjs.com/">Ember</a>, and other client
side frameworks, the user has to wait for the JavaScript to be loaded before any
client side rendering can begin, and we really wanted to prioritize initial page load. 
We decided for our use cases, we could deliver a better experience by generating HTML on the server side so the phone
can begin rendering as soon as it starts receiving data from the initial request.</p>
<p>In the coming weeks, we&#39;ll be taking a deeper dive on some of the major
architectural decisions we made. Check back to learn about:</p>
<ul>
<li><p><strong>Rivets instead of Backbone/Angular/etc.</strong><br><a href="http://www.rivetsjs.com/">Rivets</a>, turned out to be just the right size for this project.  Its simple hooks for server-side pre-rendering, Angular inspired declarative binding, and small pageweight helped us get commits in fast and deliver tiny snacks to pocket-sized screens at speeds approaching our sub-second dreams.</p>
</li>
<li><p><strong>Planning page load sequence for faster initial page load</strong><br>To get food on the screen quickly, we considered each step of the page load cycle: the first packet through user-specific javascript execution.</p>
</li>
<li><p><strong>HTTP Caching with <a href="https://www.fastly.com/">Fastly</a></strong><br>Especially with server-side generated HTML, we knew HTTP caching would be our best bet for fast page loads. By normalizing our request headers, separating session information into separate AJAX calls, and setting appropriate cache headers, we achieved significant performance gains.</p>
</li>
<li><p><strong>Appropriate image sizes with <a href="http://www.imgix.com/">imgix</a></strong><br>Folks really seem to <em>get</em> GoodEggs when they can see the food.  The photos are very very very important.  Modern iPhones have dense displays that demand high quality photos, but their networks are often strained.  We&#39;ve found a balance.</p>
</li>
<li><p><strong>Integration testing over unit testing</strong><br>We skipped adding unit tests on browser and express controller code in all but the most critical cases, minimizing the overhead of making sweeping changes, which we made frequently while figuring out our new Rivets-based architecture. Browser based integration tests assured us that shoppers could still experience their journeys after our changes. They were a huge help and a small burden.</p>
</li>
</ul>
<p>And in the meanwhile, go take a look at <a href="http://goodeggs.com">goodeggs.com</a> in a mobile device and let us know what you think!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/good-eggs-goes-mobile/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/good-eggs-goes-mobile/</guid>
            <dc:creator><![CDATA[Michael Kebbekus and Adam Hull]]></dc:creator>
            <pubDate>Fri, 11 Apr 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JS Hack for Good with JSFest]]></title>
            <description><![CDATA[<p>We&#39;re partnering with <a href="http://jsfest.com">JSFest</a> to host a JavaScript hack night for social good on Sunday evening March 9. JSFest runs March 6-12 in San Francisco.</p>
<p>Let&#39;s spend a few hours hacking together to make the world a better place. Bring your project or your desire to help others with theirs. Open source and socially-minded projects are all welcome. If you want to give a short presentation or run a mini workshop we have the facilities and welcome your initiative.</p>
<p>We&#39;ll kick off with project intros and requests for help to connect hackers with the projects they are interested in.</p>
<p>Start at 6pm with some great local food and drink to help us all connect, kick off at 6:30pm and doors close at 10:00pm.
A few folks from Good Eggs with expertise in Node, Backbone, Angular, MongoDB and more will be around to help and with some projects of their own.</p>
<p><a href="http://www.meetup.com/cultivate/events/167399892/">Reserve your spot</a> and we&#39;ll see you Sunday!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/js-hack-for-good/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/js-hack-for-good/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 04 Mar 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Good Eggs Software Development Manifesto]]></title>
            <description><![CDATA[<p>At Good Eggs we are on a mission <em>to grow and sustain local food systems worldwide</em>. Everyone in the company is here because they believe in this mission and our vision for a better future.</p>
<p>So how does this apply to our work as an engineering team and what other core values keep us aligned, excited and productive? We took some time to articulate our values as a team which I am presenting here as a first draft of our Software Development Manifesto.</p>
<!-- more -->

<h2 id="we-believe">We believe</h2>
<p><em>We believe</em> that technology can be used to make the world a better place.</p>
<p><em>We believe</em> in building beautiful things that improve people’s lives.</p>
<p><em>We believe</em> that when given an opportunity to create positive change, you act on it.</p>
<p><em>We believe</em> in the value of exploration and innovation.</p>
<p><em>We believe</em> that reshaping our food system is a direct way to care for people and our planet.</p>
<h2 id="what-we-do">What we do</h2>
<p><strong>We create change</strong><br/>
We’re building software to power a new, alternative food system: One that supports high-integrity farmers and foodmakers and enables them to compete with the industrial food complex. A system that helps all families eat well and enables them to support the future they want to see. A system where the folks doing things right are the ones who succeed.</p>
<p><strong>We make real things with real impact</strong><br/>
Yesterday we were writing the code for a new application now being tested by local farmers. Tomorrow we’ll be collecting feedback and improving on it. We’re constantly delivering new experiences and tools into the hands of our customers and producers, all of which are designed to make their lives easier.</p>
<p><strong>We’re tackling hard problems</strong><br/>
Working with food is complex with lots of variables to solve for, from weather patterns to traffic patterns. We’re innovating across the worlds of online retail, inventory management and delivery logistics to name a few, and are constantly working to make our systems and processes work even better.</p>
<h2 id="how-we-do-it">How we do it</h2>
<p><strong>We use radical tools for radical change</strong><br/>
We&#39;re members of and contributors to an open source community that is defining new ways to build applications with Node.js and full stack JavaScript. We&#39;re adventurous and use technologies that inspire us to innovate and solve problems in new ways.</p>
<p><strong>We stay nimble</strong><br/>
We work quickly because the faster we can get a solution in someone’s hands, the faster we can learn how to make it better. We test and automate with rigor so that mundane tasks don&#39;t slow us down.</p>
<p><strong>We continuously improve</strong><br/>
There is no best way, only better and better ways. We&#39;re building systems that handle complexity in the real world by creating visibility at every stage of the process. We’re empowering the people involved to solve problems when and where they happen.</p>
<p>It’s the technology at the heart of Good Eggs that will enable us to scale and make real change. We’re using technology to think big in service of the small. We’re building the systems that help local farmers sell enough to actually make a living. We’re creating efficient logistics that mean parents can trade a trip to the grocery store for time to read the kids another bedtime story. We’re fueling a food system that will feed everyone well, and we’re psyched to be doing it. Because the better we work, the better the world we all live in.</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/manifesto/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/manifesto/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Tue, 25 Feb 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Export This: Interface Design Patterns for Node.js Modules]]></title>
            <description><![CDATA[<p>When you require a module in Node, what are you getting back? When you write a module, what options do you have for designing its interface?</p>
<p>When I was first learning to work in Node I found the sheer number of ways to do things to be a bit overwhelming. JavaScript is extremely flexible and the community of developers contributing to open source seem to have different styles for implementing the same thing.</p>
<p>On my journey with Node I&#39;ve been keeping an eye out the Good Way to do things and adopting them for use in my own work and in our work at Good Eggs.</p>
<p>In this post I&#39;ll share my observations of the Node module system and the ways in which you can use it to encapsulate and share code. My goal is to identify and illustrate useful patterns for module interface design and to help you understand when and how to use them in your own work.</p>
<p>I discuss seven patterns below, many of which can be used in combination. They are:</p>
<ul>
<li><a href="/posts/export-this#namespace">Exports a Namespace</a></li>
<li><a href="/posts/export-this#function">Exports a Function</a></li>
<li><a href="/posts/export-this#higher_order_function">Exports a Higher Order Function</a></li>
<li><a href="/posts/export-this#constructor">Exports a Constructor</a></li>
<li><a href="/posts/export-this#singleton">Exports a Singleton</a></li>
<li><a href="/posts/export-this#global_object">Extends a Global Object</a></li>
<li><a href="/posts/export-this#monkey_patch">Applies a Monkey Patch</a></li>
</ul>
<!-- more -->

<h2 id="require-exports-and-module-exports">require, exports and module.exports</h2>
<p>First some fundamentals.</p>
<p>In Node requiring a file is requiring the module it defines. All modules have a reference to an implicit <code>module</code> object whose property <code>module.exports</code> is what is returned when you call <code>require</code>. A reference to <code>module.exports</code> is also available as <code>exports</code>.</p>
<p>It&#39;s as if there were an implicit line at the beginning of each module that reads:</p>
<pre class="highlight"><code class="coffeescript"><span class="reserved">var</span> <span class="built_in">exports</span> = module.<span class="built_in">exports</span> = {};</code></pre>
<p>If you want to export a function, you have to assign it to <code>module.exports</code>. Assigning a function to <code>exports</code> would just reassign the <code>exports</code> reference but <code>module.exports</code> would still point at the original empty object.</p>
<p>So we can define a module <code>function.js</code> that exports a function:</p>
<pre class="highlight"><code class="matlab"><span class="transposed_variable">module.</span>exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="cell">{name: <span class="string">'Jane'</span>}</span>;
};</code></pre>
<p>and require it with:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> func = <span class="keyword">require</span>(<span class="string">'./function'</span>);</code></pre>
<p>An important behavior of <code>require</code> is that it caches the value of <code>module.exports</code> and returns that same value for all future calls to <code>require</code>. It caches based on the absolute file path of the required file. So if you want your module to be able to return different values, you should have it export a function that can then be invoked to return a new value.</p>
<p>To demonstrate with the Node REPL:</p>
<pre class="highlight"><code class="delphi">$ node
&gt; f1 = require(<span class="string">'/Users/alon/Projects/export_this/function'</span>);
[<span class="function"><span class="keyword">Function</span>]
&gt; <span class="title">f2</span> = <span class="title">require</span><span class="params">(<span class="string">'./function'</span>)</span>;</span> <span class="comment">// Same location</span>
[<span class="function"><span class="keyword">Function</span>]
&gt; <span class="title">f1</span> === <span class="title">f2</span>
<span class="title">true</span>
&gt; <span class="title">f1</span><span class="params">()</span> === <span class="title">f2</span><span class="params">()</span>
<span class="title">false</span></span></code></pre>
<p>You can see that <code>require</code> is returning the same function instance but that the objects returned by that function are different instances for each call.</p>
<p>For more detail on Node&#39;s module system <a href="http://nodejs.org/api/modules.html">the core docs</a> provide good detail and are worth a read.</p>
<p>And now on to the interface patterns.</p>
<p><a name='namespace'></a></p>
<h2 id="exports-a-namespace">Exports a Namespace</h2>
<p>A simple and common pattern is to export an object with a number of properties, primarily but not limited to functions. This allows the code requiring the module to pull in a collection of related functionality under a single namespace.</p>
<p>When you require a module that exports a namespace, you&#39;ll usually either assign the entire namespace to a variable and use its members through that reference, or assign members directly to local variables:</p>
<pre class="highlight"><code class="scilab">var fs = require(<span class="string">'fs'</span>),
    readFile = <span class="transposed_variable">fs.</span>readFile,
    ReadStream = <span class="transposed_variable">fs.</span>ReadStream;

readFile(<span class="string">'./file.txt'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span> {</span>
  <span class="transposed_variable">console.</span>log(<span class="string">"readFile contents: '</span>%<span class="transposed_variable">s'</span><span class="string">", data);
});

new ReadStream('</span>./<span class="transposed_variable">file.</span><span class="transposed_variable">txt'</span>).on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
  <span class="transposed_variable">console.</span>log(<span class="string">"ReadStream contents: '</span>%<span class="transposed_variable">s'</span><span class="string">", data);
});</span></code></pre>
<p>Here&#39;s what the <a href="https://github.com/joyent/node/blob/e5346932bcbc523489c9418b82fde31cb666ee99/lib/fs.js#L33"><code>fs</code> core module</a> is doing:</p>
<pre class="highlight"><code class="coffeescript"><span class="reserved">var</span> fs = <span class="built_in">exports</span>;</code></pre>
<p>It first assigns the local variable <code>fs</code> to the implicit exports object and then assigns function references to properties of <code>fs</code>. Because <code>fs</code> references <code>exports</code> and exports is the object you get when you call <code>require(&#39;fs&#39;)</code> anything assigned to <code>fs</code> will be available on the object you get from <code>require</code>.</p>
<pre class="highlight"><code class="r">fs.readFile = <span class="keyword">function</span>(path, options, callback_) {
  // <span class="keyword">...</span>
};</code></pre>
<p>Anything is fair game. It then exports a constructor:</p>
<pre class="highlight"><code class="r">fs.ReadStream = ReadStream;

<span class="keyword">function</span> ReadStream(path, options) {
  // <span class="keyword">...</span>
}
ReadStream.prototype.open = <span class="keyword">function</span>() {
  // <span class="keyword">...</span>
}</code></pre>
<p>When exporting a namespace, you can assign properties to <code>exports</code> as the <code>fs</code> module does above, or assign a new object to <code>module.exports</code>.</p>
<pre class="highlight"><code class="r">module.exports = {
  version: <span class="string">'1.0'</span>,

  doSomething: <span class="keyword">function</span>() {
    //<span class="keyword">...</span>
  }
}</code></pre>
<p>A common use of exporting a namespace is to export the root of another module so that one require statement gives the caller access to a number of other modules. At Good Eggs, we implement each of our domain models in a separate module that exports the model constructor (see <a href="#constructor">Exports a Constructor</a> below) and then have an index file in the directory where the models live that exports all of the models. This allows us to pull in our models under a <code>models</code> namespace.</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> models = <span class="keyword">require</span>(<span class="string">'./models'</span>),
    User = models.User,
    Product = models.Product;</code></pre>
<p>For CoffeeScript users, <a href="http://coffeescript.org/#destructuring">destructuring assignment</a> make this even cleaner.</p>
<pre class="highlight"><code class="ruby">{<span class="constant">User</span>, <span class="constant">Product</span>} = <span class="keyword">require</span> <span class="string">'./models'</span></code></pre>
<p><code>index.js</code> might look like:</p>
<pre class="highlight"><code class="ruby">exports.<span class="constant">User</span> = <span class="keyword">require</span>(<span class="string">'./user'</span>);
exports.<span class="constant">Person</span> = <span class="keyword">require</span>(<span class="string">'./person'</span>);</code></pre>
<p>In reality, we use a small library that requires all sibling files and exports their modules with CamelCase names so the <code>index.js</code> file in our models directory actually reads:</p>
<pre class="highlight"><code class="ruby"><span class="keyword">module</span>.exports = <span class="keyword">require</span>(<span class="string">'../lib/require_siblings'</span>)(__filename);</code></pre>
<p><a name='function'></a></p>
<h2 id="exports-a-function">Exports a Function</h2>
<p>Another pattern is to export a function as the interface to a module. A common use of this pattern is to export a factory function that returns an object when invoked. We see this when using <a href="http://expressjs.com">Express.js</a>:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);
<span class="keyword">var</span> app = express();

app.get(<span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  res.send <span class="string">"Hi there! We're using Express v"</span> + express.version;
});</code></pre>
<p>The function exported by Express is used to create a new Express application. In your own use of this pattern, your factory function may take arguments used to configure or initialize the object returned.</p>
<p>To export a function, you must assign your function to module.exports. <a href="https://github.com/visionmedia/express/blob/2e68ddbae9cec2d0b22f48f35ef4da964f51949e/lib/express.js#L18">Express does</a>:</p>
<pre class="highlight"><code class="r">exports = module.exports = createApplication;

<span class="keyword">...</span>

<span class="keyword">function</span> createApplication () {
  <span class="keyword">...</span>
}</code></pre>
<p>It&#39;s assigning the <code>createApplication</code> function to <code>module.exports</code> and then to the implicit <code>exports</code> variable. Now <code>exports</code> is the function that the module exports.</p>
<p>Express also uses this exported function as a namespace:</p>
<pre class="highlight"><code class="haskell"><span class="title">exports</span>.version = '<span class="number">3.1</span><span class="number">.1</span>';</code></pre>
<p>Note that there&#39;s nothing to stop us from using the exported function as a namespace that can expose references to other functions, constructors or objects serving as namespaces themselves.</p>
<p>When exporting a function, it is good practice to name the function so that it will show up in stack traces. Note the stack trace differences in these two examples:</p>
<pre class="highlight"><code class="javascript"><span class="comment">// bomb1.js</span>
module.exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'boom'</span>);
};</code></pre>
<pre class="highlight"><code class="javascript"><span class="comment">// bomb2.js</span>
module.exports = <span class="function"><span class="keyword">function</span> <span class="title">bomb</span><span class="params">()</span> {</span>
  <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'boom'</span>);
};</code></pre>
<pre class="highlight"><code class="r">$ node
&gt; bomb = <span class="keyword">require</span>(<span class="string">'./bomb1'</span>);
[Function]
&gt; bomb()
Error: boom
    at module.exports (/Users/alon/Projects/export_this/bomb1.js:<span class="number">2</span>:<span class="number">9</span>)
    at repl:<span class="number">1</span>:<span class="number">2</span>
    <span class="keyword">...</span>
&gt; bomb = <span class="keyword">require</span>(<span class="string">'./bomb2'</span>);
[Function: bomb]
&gt; bomb()
Error: boom
    at bomb (/Users/alon/Projects/export_this/bomb2.js:<span class="number">2</span>:<span class="number">9</span>)
    at repl:<span class="number">1</span>:<span class="number">2</span>
    <span class="keyword">...</span></code></pre>
<p>There are a couple specific cases of exporting a function that are worth calling out as distinct patterns.</p>
<p><a name='higher_order_function'></a></p>
<h2 id="exports-a-higher-order-function">Exports a Higher Order Function</h2>
<p>A higher-order function, or functor, is a function that  takes one or more functions as an input and/or outputs a function. We&#39;re talking about the latter case - a function that returns a function.</p>
<p>Exporting a higher order function is a useful pattern when you want to return a function from your module but need to take input that controls the behavior of that function.</p>
<p><a href="http://www.senchalabs.org/connect/">Connect middleware</a> provide a lot of pluggable functionality for Express and other web frameworks. A middleware is a function that takes three arguments - <code>(req, res, next)</code>. The convention in connect middleware is to export a function that when called returns the middleware function. This allows the exported function to take arguments that can be used to configure the middleware and are available through closure scope to the middleware when it is handling a request.</p>
<p>For example, here&#39;s the connect <a href="http://www.senchalabs.org/connect/query.html"><code>query</code> middleware</a> used internally by Express to parse query string parameters into a an object available as <code>req.query</code>.</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> connect = <span class="keyword">require</span>(<span class="string">'connect'</span>),
    query = <span class="keyword">require</span>(<span class="string">'connect/lib/middleware/query'</span>);

<span class="keyword">var</span> app = connect();
app.<span class="keyword">use</span>(query({maxKeys: <span class="number">100</span>}));</code></pre>
<p>The <code>query</code> source looks like:</p>
<pre class="highlight"><code class="scilab">var qs = require(<span class="string">'qs'</span>)
  , parse = require(<span class="string">'../utils'</span>).parseUrl;

<span class="transposed_variable">module.</span>exports = <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(options)</span>{</span>
  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(req, res, next)</span>{</span>
    <span class="keyword">if</span> (!<span class="transposed_variable">req.</span>query) {
      <span class="transposed_variable">req.</span>query = ~<span class="transposed_variable">req.</span><span class="transposed_variable">url.</span>indexOf(<span class="string">'?'</span>)
        ? <span class="transposed_variable">qs.</span>parse(parse(req).query, options)
        : {};
    }

    next();
  };
};</code></pre>
<p>For every request handled by the <code>query</code> middleware, the <code>options</code> argument available through closure scope is passed along to Node&#39;s core <code>qs</code> (query string) module.</p>
<p>This is a common and very flexible pattern for module design and one you are likely to find very useful in your own work.</p>
<p><a name='constructor'></a></p>
<h2 id="exports-a-constructor">Exports a Constructor</h2>
<p>We define classes in JavaScript with constructor functions and create instances of classes with the <code>new</code> keyword.</p>
<pre class="highlight"><code class="scilab"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> {</span>
  <span class="transposed_variable">this.</span>name = name;
}

<span class="transposed_variable">Person.</span><span class="transposed_variable">prototype.</span>greet = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="string">"Hi, I'</span>m <span class="transposed_variable">Jane.</span><span class="string">";
};

var person = new Person('</span><span class="transposed_variable">Jane'</span>);
<span class="transposed_variable">console.</span>log(<span class="transposed_variable">person.</span>greet()); <span class="comment">// prints: Hi, I'm Jane</span></code></pre>
<p>For this pattern implement a class-per-file and export the constructor to make your project organization clear and to make it easy for other developers to find the implementation of a class. At Good Eggs, we implement classes in files with underscore_names and assign them to CamelCase names.</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> Person = <span class="keyword">require</span>(<span class="string">'./person'</span>);

<span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Jane'</span>);</code></pre>
<p>The implementation might look like:</p>
<pre class="highlight"><code class="scilab"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> {</span>
  <span class="transposed_variable">this.</span>name = name;
}

<span class="transposed_variable">Person.</span><span class="transposed_variable">prototype.</span>greet = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="string">"Hi, I'</span>m <span class="string">" + this.name;
};

module.exports = Person;</span></code></pre>
<p><a name='singleton'></a></p>
<h2 id="exports-a-singleton">Exports a Singleton</h2>
<p>Export a <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> when you want all users of your module to share the state and behavior of a single class instance.</p>
<p><a href="http://mongoosejs.com">Mongoose</a> is an object-document mapping library used to create rich domain models persisted in MongoDB.</p>
<pre class="highlight"><code class="r">var mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>);
mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);

var Cat = mongoose.model(<span class="string">'Cat'</span>, { name: String });

var kitty = new Cat({ name: <span class="string">'Zildjian'</span> });
kitty.save(<span class="keyword">function</span> (err) {
  <span class="keyword">if</span> (err) // <span class="keyword">...</span>
  console.log(<span class="string">'meow'</span>);
});</code></pre>
<p>What is that <code>mongoose</code> object we get back when we require Mongoose? Internally, the <code>mongoose</code> module is doing:</p>
<pre class="highlight"><code class="r"><span class="keyword">function</span> Mongoose() {
  //<span class="keyword">...</span>
}

module.exports = exports = new Mongoose();</code></pre>
<p>Because <code>require</code> caches the value assigned to <code>module.exports</code>, all calls to <code>require(&#39;mongoose&#39;)</code> will return this same instance ensuring that it is a singleton in our application. Mongoose uses an object-oriented design to encapsulate and decouple functionality, maintain state and support readability and comprehension, but creates a simple interface to users by creating and exporting an instance of the Mongoose class.</p>
<p>It also uses this singleton instance as a namespace to make other constructors available if needed by the user, including the Mongoose constructor itself. You might use the <code>Mongoose</code> constructor to create additional instances of mongoose connecting to additional MongoDB databases.</p>
<p>Internally, Mongoose does:</p>
<pre class="highlight"><code class="avrasm">Mongoose<span class="preprocessor">.prototype</span><span class="preprocessor">.Mongoose</span> = Mongoose<span class="comment">;</span></code></pre>
<p>So that you can do:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>),
    Mongoose = mongoose.Mongoose;

<span class="keyword">var</span> myMongoose = <span class="keyword">new</span> Mongoose();
myMongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</code></pre>
<p><a name='global_object'></a></p>
<h2 id="extends-a-global-object">Extends a Global Object</h2>
<p>A required module can do more than just export a value. It can also modify global objects or objects returned when requiring other modules. It can define new global objects. It can just do this or do this in addition to exporting something useful.</p>
<p>Use this pattern when you need to extend or alter the behavior of global objects to provide the behavior delivered by your module. While certainly controversial and to be used judiciously (especially in open source work), this pattern can also be indispensable.</p>
<p><a href="https://github.com/visionmedia/should.js">Should.js</a> is an assertion library designed to be used in unit testing:</p>
<pre class="highlight"><code class="matlab">require(<span class="string">'should'</span>);

var user = <span class="cell">{
    name: <span class="string">'Jane'</span>
}</span>;

<span class="transposed_variable">user.</span><span class="transposed_variable">name.</span><span class="transposed_variable">should.</span>equal(<span class="string">'Jane'</span>);</code></pre>
<p>Should.js <a href="https://github.com/visionmedia/should.js/blob/68000f47d01408cacb80441a1d9bf10ba423e54c/lib/should.js#L107-L113">extends Object with a non-enumerable property <code>should</code></a> to provide a clean syntax for writing unit test asserts. Internally, <code>should.js</code> does:</p>
<pre class="highlight"><code class="r">var should = <span class="keyword">function</span>(obj) {
  <span class="keyword">return</span> new Assertion(util.isWrapperType(obj) ? obj.valueOf(): obj);
};

//<span class="keyword">...</span>

exports = module.exports = should;

//<span class="keyword">...</span>

Object.defineProperty(Object.prototype, <span class="string">'should'</span>, {
  set: <span class="keyword">function</span>(){},
  get: <span class="keyword">function</span>(){
    <span class="keyword">return</span> should(this);
  },
  configurable: true
});</code></pre>
<p>Note that while Should.js exports the <code>should</code> function its primary use is through the <code>should</code> function it has added to <code>Object</code>.</p>
<p><a name='monkey_patch'></a></p>
<h2 id="applies-a-monkey-patch">Applies a Monkey Patch</h2>
<p>By <a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a> I&#39;m referring to &quot;the dynamic modifications of a class or module at runtime, motivated by the intent to patch existing third-party code as a workaround to a bug or feature which does not act as desired.&quot;</p>
<p>Implement a module to patch an existing module when it doesn&#39;t provide an interface to customizing its behavior in the way you need. This pattern is a variant of the previous. Instead of modifying a global object, we are relying on the caching behavior of Node&#39;s module system to patch the same instance of a module that other code gets when it requires that module.</p>
<p>By default Mongoose names MongoDB collections by lowercasing and pluralizing the model name. For a model named <code>CreditCardAccountEntry</code> we&#39;d end up with a collection named <code>creditcardaccountentries</code>. I prefer <code>credit_card_account_entries</code> and I want this behavior universally.</p>
<p>Here&#39;s the source for a module that patches <code>mongoose.model</code> when the module is required:</p>
<pre class="highlight"><code class="php"><span class="keyword">var</span> Mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>).Mongoose;
<span class="keyword">var</span> _ = <span class="keyword">require</span>(<span class="string">'underscore'</span>);

<span class="keyword">var</span> model = Mongoose.prototype.model;
<span class="keyword">var</span> modelWithUnderScoreCollectionName = <span class="function"><span class="keyword">function</span><span class="params">(name, schema, collection, skipInit)</span> {</span>
  collection = collection || _(name).chain().underscore().pluralize().value();
  model.call(<span class="keyword">this</span>, name, schema, collection, skipInit);
};
Mongoose.prototype.model = modelWithUnderScoreCollectionName;</code></pre>
<p>When this module is required for the first time, it requires <code>mongoose</code>, redefines <code>Mongoose.prototype.model</code> and delegates back to the original implementation of <code>model</code>. Now all instances of <code>Mongoose</code> will have this new behavior. Note that it does not modify <code>exports</code> so the value returned to <code>require</code> will be the default empty <code>exports</code> object.</p>
<p>As a side note, if you do choose to monkey patch existing code, use a chaining technique similar to my example above. Add your behavior then delegate back to the original implementation. While not foolproof, it is the safest way to patch third party code allowing you to take advantage of future updates to the library and minimizing conflict with other patches that may be applied.</p>
<h2 id="export-away-">Export Away!</h2>
<p>The Node module system provides a simple mechanism for encapsulating functionality and creating clear interfaces to your code. I hope the seven patterns here are a useful breakdown of different strategies available to you.</p>
<p>I haven&#39;t been exhaustive and there are certainly other options available but I have attempted to describe the most common and useful. Have I missed anything that should be included here?</p>
<p><em>Thanks to the incredibly prolific Node developer community for all the open source work from which I have done most of my learning. I encourage you to read the code of the libraries you are using and to find the great developers out there with clear, consistent and readable styles that can inspire your own. Special shout out to <a href="https://github.com/visionmedia">TJ Holowaychuk</a> whose work on Express.js, Connect and Should.js are referenced above.</em></p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/export-this/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/export-this/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Sun, 12 Jan 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cultivate Inaugural Meetup]]></title>
            <description><![CDATA[<p>The first <a href="http://www.meetup.com/cultivate">Cultivate meetup</a> was a huge success.</p>
<blockquote>
&quot;great first event for a meetup with a compelling mix of javascript code and social impact&quot;
</blockquote>

<blockquote>
&quot;Great meetup! Lots of interesting people and talks. Looking forward to future ones.&quot;
</blockquote>

<blockquote>
&quot;This was a great way to kickoff the Cultivate meetups; I left informed, enthused, (oh yeah, and nourished) and committed to return.&quot;
</blockquote>


<!-- more -->

<p>Over 80 members of the developer community came together on a chilly San Francisco night, under a common purpose: to use technology for the betterment of humanity and the planet.</p>
<p>As Good Eggs CTO Alon Salant said in an opening statement, &quot;We are building tools that affect real people in the real world. It&#39;s about affecting real change in someone&#39;s work to enhance their life.&quot;</p>
<p>The event kicked off with with a delicious bang: <a href="http://www.goodeggs.com/loveandhummus">Love &amp; Hummus</a> delivered an exceptional dining experience. Hearty falafel wraps, homemade tahini sauce, spicy hummus, sultry baklava, and mint-garnish lemonade.</p>
<p>If your mouth isn&#39;t watering yet, wait till you sink your teeth into the presentations.</p>
<h2 id="hanging-up-on-callbacks-more-than-flow-control-w-ecmascript-6-generators">Hanging up on Callbacks - [More than] Flow Control w/ECMAScript 6 Generators</h2>
<p><a href="http://www.carbonfive.com/employee/erin-swenson-healey">Erin Swanson-Healey</a> from Carbon Five gave a thorough walk-through into dealing with asynchronous callbacks in Javascript. With charisma and charm he  stated that we have new ways to deal with &quot;callback hell&quot;.</p>
<p>New Solution: <a href="http://www.2ality.com/2013/06/iterators-generators.html">ECMAScript 6</a> provides generators, which alleviates some of challenges that are associated with asynchronous callbacks.</p>
<p>Read Erin&#39;s <a href="http://blog.carbonfive.com/2013/12/01/hanging-up-on-callbacks-generators-in-ecmascript-6/">detailed blog post</a> on the topic, and check out his <a href="https://docs.google.com/a/goodeggs.com/presentation/d/1c23KjxQIoKKjho2wnjRXdJhmWd6X3g10B5ggC1DUE0M/edit#slide=id.p">slides</a> from the presentation here.</p>
<h2 id="whats-new-in-node-v0-12-">Whats new in Node v0.12.</h2>
<p>Next up was <a href="https://github.com/piscisaureus">Bert Belder</a> from StrongLoop. Bert is one of the principal authors of <a href="http://nikhilm.github.io/uvbook/introduction.html">libuv</a>, which is the library on which Node.js is built. Needless to say, we were stoked to see him present at the first Cultivate meetup!</p>
<p>Bert provided insight into:</p>
<ul>
<li>Round-robin clustering</li>
<li>Profiling</li>
<li>ExecSync</li>
<li>Multi-context</li>
</ul>
<p>Read more about <a href="http://strongloop.com/strongblog/whats-new-in-node-js-v0-12-cluster-round-robin-load-balancing/">cluster round-robin load balancing</a> from StrongLoop. For kicks, here is <a href="http://www.youtube.com/watch?v=QnO6Uut4Ao8">a video of Bert at LXJS 2013</a> - being a boss!</p>
<h2 id="mongodb-performance-fundamentals-for-web-apps">MongoDB Performance Fundamentals for Web Apps</h2>
<p><a href="http://www.goodeggs.com/about/team/sfbay/522103184f08c30300000028">Adam Hull</a> from Good Eggs was our final presenter, and he finished strong! We were lucky to have insights from Adam into performance, speed, and use of Mongo. The presentation ended with a pretty long Q&amp;A session that surfaced  answers to some questions that the collective developer community seemed to have been yearning to ask. Many of the remarks were confirmed with a head-nod from two developers from MongoLab in the audience. Head nods and &quot;ah ha&#39;s&quot; all around!</p>
<h2 id="lightning-talks">Lightning Talks</h2>
<p>Flashing through in 5-minute intervals, our speedy speakers were able to capture the audience with cool projects and insights, including:</p>
<ul>
<li>Jessica Lam - <a href="http://www.sgrbx.io/#/play/sHMVrO1jg8">real-time collaboration with sugarbox.io</a></li>
<li>Max Edmands - <a href="http://danieltao.com/lazy.js/">lazy.js</a> + <a href="https://github.com/demands/lazy-presentation">slides</a></li>
<li>Stewart Noyce - <a href="http://www.trunort.com/docs/Cultivate-Dec2013.pdf">lessons learned</a></li>
<li>Shubhra Kar - <a href="http://strongloop.com/strongloop-suite/strongops/">StrongOps Node performance monitoring dashboard</a></li>
<li>Alon Salant, - <a href="https://github.com/goodeggs/fibrous">fibrous library</a></li>
</ul>
<p>Overall, from our speakers there is one common thread: writing great apps with JavaScript is hard work. But with new tools, techniques and frameworks emerging, we can &quot;cultivate&quot; the developer community into a unified force, working together to blend technology and awareness to benefit humankind, the planet, and our future.</p>
<p>Join us for our next event, happening in early 2014!</p>
<p>Check back regularly <a href="http://www.meetup.com/cultivate"><a href="http://www.meetup.com/cultivate">http://www.meetup.com/cultivate</a></a> or email <a href="mailto:kevin@goodeggs.com">kevin@goodeggs.com</a> for suggestions or details.</p>
<p>Cheers!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/first-cultivate-meetup/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/first-cultivate-meetup/</guid>
            <dc:creator><![CDATA[Kevin Uland]]></dc:creator>
            <pubDate>Fri, 06 Dec 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[In Season for Fall and Winter]]></title>
            <description><![CDATA[<p>Last week <a href="http://blog.goodeggs.com/post/62349630794/were-thrilled-to-partner-with-sequoia-capital-to">we announced our Series A funding</a>
led by Sequoia Capital. After a summer of hustling to grow sales and build tools to keep great local food flowing smoothly
through our San Francisco foodhub we can now turn attention to building the systems we need to scale Good Eggs in
Brooklyn, New Orleans, Los Angeles and beyond.</p>
<p>Here&#39;s an overview of what we&#39;re working on and what&#39;s coming up for the software development team at Good Eggs.</p>
<!-- more -->

<p>We have three domains in which we are building applications:</p>
<ul>
<li>Local food shopping</li>
<li>Producer business tools</li>
<li>Just-in-time logistics</li>
</ul>
<p>We have a dedicated product team working on each of these domains. A product team consists of
a product lead, four to six engineers and a designer. Engineers regularly rotate among teams so we get the great
cross-pollination and learning that comes from collaborating with new people.</p>
<h2 id="local-food-shopping">Local food shopping</h2>
<p><a href="http://www.goodeggs.com">GoodEggs.com</a> is a great online food shopping experience that is more convenient than going to the grocery store while
supporting a direct connection to the people producing your food. Today you can shop in any of four foodsheds
(SF Bay, Brooklyn, New Orleans, Los Angeles) and buy food directly from hundreds of farmers or foodmakers for fulfillment
by Good Eggs or directly by the producer. We&#39;ll send you pickup and delivery reminders by email and SMS and a
regular weekly email that keeps you up to date with the new seasonal products regularly showing up in the market.</p>
<p>Our challenge is to create an experience that helps busy people to easily get food they trust and love on their tables.
Coming up for this team is creating a search experience to help you find exactly what you are looking for, richer
stories and media about the many farmers and foodmakers that power Good Eggs, a mobile
app so that you can buy those salad greens right when you think of it instead of adding to your grocery list, and features
to help you discover more great food from your friends and family who are also eating well on Good Eggs.</p>
<h2 id="producer-business-tools">Producer business tools</h2>
<p>Our tools for farmers and foodmakers enable them to manage their products and inventory,
create promotions and do their own customer service by issuing refunds and communicating directly with their customers.
They receive email alerts when shoppers buy their products
and daily emails that coordinate their production and delivery schedules with our receiving staff.</p>
<p>Our challenge is to bring big business technology smarts to serve small and mid-size businesses. For businesses that
largely run off paper and spreadsheets, we&#39;ve already made a world of difference. We&#39;re turning our attention now to
improving the mobile experience since these people are more often on a phone than at a computer. We&#39;re looking at ways to
use the data about what people are buying and when to help these businesses make better decisions about what to plant, raise
and prepare in order to run more efficient and profitable businesses.</p>
<h2 id="just-in-time-logistics">Just-in-time logistics</h2>
<p>Our logistics systems power a new kind of food distribution characterized by just-in-time fulfillment through our
physical food hubs in San Francisco, Brooklyn, New Orleans and Los Angeles. We receive food from producers in the morning,
start packing orders at 11am and have the first vehicles going out by 1pm to delivery and pickup locations. All food that
arrives in our foodhub has already been sold and is destined for a customer&#39;s plate.</p>
<p>This system is actually a suite of applications that tie together receiving, packing, routing, driving and customer service
to provide a seamless experience to our customers. It is the real engine behind Good Eggs.
It must be fault-tolerant and handle smoothly the many small issues that arise when tracking real food as it moves through the day
from producer to customer.</p>
<p>We&#39;ve evolved this system rapidly with a combination of digital and paper tools. Each morning we print receiving, packing and route
sheets that our Local Food Dispatcher teams use to assemble and deliver orders. Paper has been a fantastic medium for this
experimentation as it is infinitely hackable. We can make notes, update information or create a stack of issues to be picked
up and handled by someone else. It has enabled us to iterate extremely quickly and invent new practices as we go.</p>
<p>We&#39;re now ready to codify much of these practices into the next version of our logistics software. Our receiving team
is already using our new tablet-based receiving app, code-named Kale and built with AngularJS, to record all food entering the foodhub, track
temperature/cold chain for chill and frozen items, and identify issues to be handled by customer service. On deck is an
app for our drivers to easily follow their delivery routes, communicate with customers on the go and provide a more personalized
experience when they arrive at their door.</p>
<h2 id="the-future">The Future</h2>
<p>We&#39;ve got our work cut out for us. As our teams grow in other foodsheds, one of the best ways we can serve them is
to deliver great software that embodies the effective practices we have developed scaling up our San Francisco foodhub.
These practices continue to evolve so we&#39;re building these systems to be as simple and malleable as possible. One thing
that we can rely on for the future is that we will always be learning, changing and improving.</p>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/fall-2013/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/fall-2013/</guid>
            <dc:creator><![CDATA[Alon Salant]]></dc:creator>
            <pubDate>Mon, 30 Sep 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Fibrous on Harmony Generators? Impossible]]></title>
            <description><![CDATA[<p>A good Friday afternoon chat about asynchronous programming models left me wondering if the fibrous API could be implemented on top of <a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators">ES6 generators</a>. Generators are baked in to Node 0.11, Chrome 19, and Firefox.  A port would be a big boost to interoperability.  <a href="https://github.com/google/traceur-compiler">Traceur</a> can even transform generator based code into a <a href="http://traceur-compiler.googlecode.com/git/demo/repl.html#function*%20test%20()%20%7B%0A%20%20yield%201%3B%0A%20%20var%20a%20%3D%20yield%202%3B%0A%20%20try%20%7B%0A%20%20%20%20yield%20a%3B%0A%20%20%7D%20catch%20(e)%20%7B%0A%20%20%20%20yield%2099%3B%0A%20%20%7D%0A%20%20for(var%20i%20%3D0%3B%20i%20%3C%201%3B%20i%2B%2B)%20%7B%0A%20%20%20%20yield%20123%3B%0A%20%20%7D%0A%7D%0A%0Afunction%20normal()%20%7B%0A%20%20var%20a%20%3D%20b%3B%0A%20%20return%20b%3B%0A%7D">giant state machine</a> that runs on all of today&#39;s environments.</p>
<p>At first the port looked promising. Wikipedia claimed that general coroutines could be <a href="http://en.wikipedia.org/wiki/Coroutine#Comparison_with_generators">built on generators</a>, and many folks have <a href="http://taskjs.org/">done</a> <a href="https://gist.github.com/creationix/5762837">just</a> <a href="https://gist.github.com/Benvie/5667557">that</a>.  After a little noodling I&#39;m pretty sure it can&#39;t be done.  In a Harmony environment a function can only suspend execution at <code>yield</code> expressions and <code>yield</code> expressions can only appear in generator functions. A yield expression cannot be wrapped up behind a fibrous <code>sync</code> or <code>wait</code>.</p>
<!-- more -->

<p>Let&#39;s say we&#39;ve got a fibrous function <code>f</code> that synchronously calls asychronous function <code>g</code>:</p>
<pre class="highlight"><code class="javascript"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    console.log(<span class="string">'g done'</span>);
    callback();
  }, <span class="number">1000</span>);
};

<span class="keyword">var</span> f = fibrous(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  g.sync();
  console.log(<span class="string">'f done'</span>);
};</code></pre>
<p>When we call <code>f</code> we wait one second, log <code>&#39;g done&#39;</code>, then log <code>&#39;f done&#39;</code>.  We need to halt <code>f</code> before the <code>console.log</code>, but <code>f</code> has no yield expressions.  It cannot be halted with any combination of ES6 generators.  Tough break.</p>
<hr>
<h3 id="related">Related</h3>
<ul>
<li><a href="http://taskjs.org/">Task.js</a> seems like a great way to get fibrous-like behavior within the generator constraints.  Still waiting on <a href="https://github.com/mozilla/task.js/issues/28">ES6 syntax support</a> and a <a href="https://github.com/mozilla/task.js/issues/17">CommonJS module published to NPM</a>.</li>
<li>Fellow coffee lovers, the proposed <a href="https://github.com/jashkenas/coffee-script/pull/3078">coffee script syntax for generators</a> is a &#39;lil fugly and worth checking out.</li>
</ul>
]]></description>
            <link>http://goodeggs.github.io/bites/posts/fibrous-on-harmony-generators/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/fibrous-on-harmony-generators/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Sat, 17 Aug 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Ids in Mongoose, JSON, and Backbone]]></title>
            <description><![CDATA[<p>Mongoose adds <a href="http://mongoosejs.com/docs/guide.html#id">id sugar</a> on top the default _id document attribute.  Backbone has <a href="http://backbonejs.org/#Model-idAttribute">similar sugar</a>, but the types don&#39;t line up.  Pushing bits between the two with a customary JSON document adds a third representation.</p>
<p>If you find yourself typing <code>vegetable.id</code> when you really needed <code>new ObjectID(vegetable.toJSON()._id)</code> this fancy chart might help:
<!-- more --></p>
<table class="ids">
  <tr><th>Mongoose</th><th>id</th><th>_id</th></tr>
  <tr><td><a href="http://mongoosejs.com/docs/api.html#document_Document-id">document</a></td><td>String</td><td>ObjectID</td></tr>
  <tr><td><a href="http://mongoosejs.com/docs/api.html#query_Query-lean">lean document</a></td><td>∅</td><td>ObjectID</td></tr>
  <tr><td><a href="http://mongoosejs.com/docs/api.html#document_Document-toJSON">document.toJSON()</a></td><td>∅</td><td>ObjectID</td></tr>

  <tr><th>JSON</th><th></th><th></th></tr>
  <tr><td><a href="http://www.json.org/">object</a></td><td>∅</td><td>String</td></tr>

  <tr><th>Backbone</th><th></th><th></th></tr>
  <tr><td><a href="http://backbonejs.org/#Model-id">model</td><td>String</td><td>∅</td></tr>
  <tr><td><a href="http://backbonejs.org/#Model-get">model.get()</td><td>∅</td><td>String</td></tr>
</table>]]></description>
            <link>http://goodeggs.github.io/bites/posts/ids-in-mongoose-json-and-backbone/</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/posts/ids-in-mongoose-json-and-backbone/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Tue, 02 Apr 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Structuring Expressions in CoffeeScript]]></title>
            <description><![CDATA[<p>CoffeeScript can save as many keystrokes putting objects together as it can taking them apart.</p>
<p class="update">
  For a while I was calling this lexeme <em>restructuring assignment</em> until some on Stack Overflow <a href="http://stackoverflow.com/a/14822198/407845">pointed out that name was ridiculous</a>.  Now I&#39;ve taken to the name <em>structuring expressions</em>.
</p>

<!-- more -->

<p>Sure <a href="http://blog.carbonfive.com/2011/09/28/destructuring-assignment-in-coffeescript/">C5 told you all about</a> CoffeeScript’s <a href="http://coffeescript.org/#destructuring">destructing assignment</a> syntax for objects…</p>
<p>How it can reach deep into nested structures</p>
<pre class="highlight"><code class="coffeescript">coffee&gt; user = <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>, <span class="attribute">address</span>: { <span class="attribute">city</span>: <span class="string">'Anytown'</span>, <span class="attribute">state</span>:
<span class="string">'AL'</span> }
{ <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>, <span class="attribute">address</span>: { <span class="attribute">city</span>: <span class="string">'Anytown'</span>, <span class="attribute">state</span>: <span class="string">'AL'</span> } }

coffee&gt; { <span class="attribute">address</span>: { city, state } } = user
{ <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>, <span class="attribute">address</span>: { <span class="attribute">city</span>: <span class="string">'Anytown'</span>, <span class="attribute">state</span>: <span class="string">'AL'</span> } }

coffee&gt; city
<span class="string">'Anytown'</span></code></pre>
<p>Or pluck apart function arguments</p>
<pre class="highlight"><code class="coffeescript"><span class="function"><span class="title">displayName</span> = <span class="params">({ name, age })</span> -&gt;</span>
  console.log <span class="string">"<span class="subst">#{name}</span>, <span class="subst">#{age}</span> year(s) old"</span>

coffee&gt; displayName <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>
Foo, <span class="number">42</span> year(s) old</code></pre>
<p>Or even destructure directly to instance attributes</p>
<pre class="highlight"><code class="coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">({ <span class="property">@name</span>, <span class="property">@age</span> })</span> -&gt;</span>

coffee&gt; <span class="keyword">new</span> User(<span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>)
{ <span class="attribute">name</span>: <span class="string">'foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> }</code></pre>
<p>But what does this do?</p>
<pre class="highlight"><code class="coffeescript">coffee&gt; age = <span class="number">42</span>
<span class="number">42</span>

coffee&gt; user = { <span class="string">'Foo'</span>, age }
?</code></pre>
<p>My fudge-fingers managed to mash that one unknowingly into my editor one day while attempting to rack up velocity points on the latest story. Instead of hemorrhaging the expected SyntaxError, it evaluated to this beautiful new object</p>
<pre class="highlight"><code class="coffeescript">{ <span class="attribute">Foo</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> }</code></pre>
<p>Now I’ve got a handy set syntax</p>
<pre class="highlight"><code class="coffeescript">coffee&gt; <span class="number">2</span> <span class="keyword">of</span> { <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> }
<span class="literal">true</span>

coffee&gt; <span class="number">2</span> <span class="keyword">of</span> { <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> }
<span class="literal">false</span></code></pre>
<p>And with consistent variable naming, breezy data marshaling between some framework actors</p>
<pre class="highlight"><code class="coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">({ <span class="property">@name</span>, <span class="property">@age</span> })</span> -&gt;</span>

<span class="function"><span class="title">template</span> = <span class="params">({ user, face })</span> -&gt;</span>
  <span class="string">"&lt;div&gt;<span class="subst">#{user.name}</span> <span class="subst">#{face}</span>&lt;/div&gt;"</span>

<span class="class"><span class="keyword">class</span> <span class="title">UserView</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">({ <span class="property">@user</span> })</span> -&gt;</span>

  <span class="attribute">render</span>:<span class="function"> -&gt;</span>
    <span class="property">@html</span> = template {
      <span class="property">@user</span>
      <span class="attribute">face</span>: <span class="string">':)'</span>
    }

coffee&gt; user = <span class="keyword">new</span> User(<span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>)
{ <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> }

coffee&gt; view = <span class="keyword">new</span> UserView {user}
{ <span class="attribute">user</span>: { <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> } }

coffee&gt; view.render()
<span class="string">'&lt;div&gt;Foo :)&lt;/div&gt;'</span></code></pre>
]]></description>
            <link>http://goodeggs.github.io/bites/post/41935904836/restructuring-assignment-in-coffeescript</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/post/41935904836/restructuring-assignment-in-coffeescript</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Tue, 12 Feb 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Teacup: CoffeeScript Templates for Developer Happiness]]></title>
            <description><![CDATA[<p><a href="http://goodeggs.github.com/teacup/"><img src="https://raw.github.com/goodeggs/teacup/master/docs/teacup.jpg" alt="Teacup"></a></p>
<p>We&#8217;ve released a <a href="http://goodeggs.github.com/teacup/">templating language</a> that feels just right for a team of full stack CoffeeScript developers optimizing for developer happiness.  Check out the <a href="http://goodeggs.github.com/teacup/#getting-started">example integrations</a> with Backbone, Express, and Rails, or try it neat in the browser.  Teacup builds on <a href="https://github.com/mark-hahn/drykup">a</a> <a href="https://github.com/markaby/markaby">rich</a> <a href="https://github.com/mauricemach/coffeekup">history</a> of templating in the language of your app to minimize context switching and toolchain duplication while trusting the developer to maintain separation between domain and templating tiers.  Here&#8217;s a quick sample:</p>
<pre class="highlight"><code class="coffeescript">{renderable, ul, li, input} = <span class="built_in">require</span> <span class="string">'teacup'</span>

template = renderable <span class="function"><span class="params">(teas)</span>-&gt;</span>
  ul<span class="function"> -&gt;</span>
    <span class="keyword">for</span> tea <span class="keyword">in</span> teas
      li tea
    input <span class="attribute">type</span>: <span class="string">'button'</span>, <span class="attribute">value</span>: <span class="string">'Steep'</span>

console.log template([<span class="string">'Jasmine'</span>, <span class="string">'Darjeeling'</span>])</code></pre>
<p>Outputs:</p>
<pre class="highlight"><code class="xml"><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Jasmine<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Darjeeling<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"Steep"</span>/&gt;</span></code></pre>
<p>Try it out!</p>
]]></description>
            <link>http://goodeggs.github.io/bites/post/40042760798/teacup-coffeescript-templates-for-developer-happiness</link>
            <guid isPermaLink="true">http://goodeggs.github.io/bites/post/40042760798/teacup-coffeescript-templates-for-developer-happiness</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Tue, 08 Jan 2013 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>